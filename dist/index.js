/*! For license information please see index.js.LICENSE.txt */
"use strict";(self.webpackChunkwebpack_demo=self.webpackChunkwebpack_demo||[]).push([[826],{426:(t,e,n)=>{n.d(e,{Z:()=>l});var o=n(537),r=n.n(o),i=n(645),a=n.n(i)()(r());a.push([t.id,"body {\n  background-color: mistyrose;\n}\n\n.elegant-font {\n  font-family: 'Courier New', Courier, monospace;\n}\n\n*:focus {\n  outline: none !important;\n  box-shadow: none !important;\n}\n\n*:checked + span,\n.cancel {\n  text-decoration: line-through;\n}\n\n.custom-bg {\n  background-color: hsl(39, 88%, 87%);\n}\n\n#task {\n  padding: 20px;\n}\n\n#myList {\n  list-style: none;\n  margin: 0;\n}\n\n.container {\n  box-shadow: 2px 2px 2px 2px rgba(0, 0, 0, 0.2);\n}\n\ninput:placeholder-shown {\n  font-style: italic;\n}\n\n.form-control {\n  border: none;\n}\n\n.list-group {\n  margin: 0;\n}\n\n.list-group-item {\n  border: none;\n}\n\n#refresh {\n  cursor: pointer;\n  color: red;\n}\n\n[contenteditable='true']#dash {\n  white-space: nowrap;\n  overflow: hidden;\n  padding: 7px;\n  outline: 0 solid transparent;\n}\n\n.close {\n  display: none;\n  color: red !important;\n  opacity: 1;\n}\n\n.close:hover {\n  opacity: 1;\n}\n\n.ellipsis-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  right: 0;\n  margin-left: auto;\n  cursor: move;\n  width: 60px;\n}\n\n.fa-ellipsis-v {\n  color: #777;\n}\n\n.ellipsis-container:hover .fa-ellipsis-v {\n  color: #222;\n}\n\n.fa-trash-o {\n  cursor: pointer;\n  margin-left: auto;\n}\n\ninput[type='checkbox'] {\n  cursor: pointer;\n}\n\n#complete {\n  text-decoration: none !important;\n}\n\n#complete p {\n  color: #777;\n  font-size: 15px;\n  font-weight: lighter;\n}\n\n#complete p:hover {\n  color: #000;\n  text-decoration: underline;\n}\n\n.spin-animation {\n  transition: 0.9s;\n  transform: rotate(360deg);\n  -webkit-transform: rotate(360deg);\n  -ms-transform: rotate(360deg);\n}\n\n.reset {\n  cursor: pointer;\n  color: red;\n  transition: 0.5s;\n  transform: rotate(360deg);\n  -ms-transform: rotate(360deg);\n  -webkit-transform: rotate(360deg);\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,2BAA2B;AAC7B;;AAEA;EACE,8CAA8C;AAChD;;AAEA;EACE,wBAAwB;EACxB,2BAA2B;AAC7B;;AAEA;;EAEE,6BAA6B;AAC/B;;AAEA;EACE,mCAAmC;AACrC;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,gBAAgB;EAChB,SAAS;AACX;;AAEA;EACE,8CAA8C;AAChD;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,SAAS;AACX;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,eAAe;EACf,UAAU;AACZ;;AAEA;EACE,mBAAmB;EACnB,gBAAgB;EAChB,YAAY;EACZ,4BAA4B;AAC9B;;AAEA;EACE,aAAa;EACb,qBAAqB;EACrB,UAAU;AACZ;;AAEA;EACE,UAAU;AACZ;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,kBAAkB;EAClB,MAAM;EACN,SAAS;EACT,QAAQ;EACR,iBAAiB;EACjB,YAAY;EACZ,WAAW;AACb;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,eAAe;EACf,iBAAiB;AACnB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,gCAAgC;AAClC;;AAEA;EACE,WAAW;EACX,eAAe;EACf,oBAAoB;AACtB;;AAEA;EACE,WAAW;EACX,0BAA0B;AAC5B;;AAEA;EACE,gBAAgB;EAChB,yBAAyB;EACzB,iCAAiC;EACjC,6BAA6B;AAC/B;;AAEA;EACE,eAAe;EACf,UAAU;EACV,gBAAgB;EAChB,yBAAyB;EACzB,6BAA6B;EAC7B,iCAAiC;AACnC",sourcesContent:["body {\n  background-color: mistyrose;\n}\n\n.elegant-font {\n  font-family: 'Courier New', Courier, monospace;\n}\n\n*:focus {\n  outline: none !important;\n  box-shadow: none !important;\n}\n\n*:checked + span,\n.cancel {\n  text-decoration: line-through;\n}\n\n.custom-bg {\n  background-color: hsl(39, 88%, 87%);\n}\n\n#task {\n  padding: 20px;\n}\n\n#myList {\n  list-style: none;\n  margin: 0;\n}\n\n.container {\n  box-shadow: 2px 2px 2px 2px rgba(0, 0, 0, 0.2);\n}\n\ninput:placeholder-shown {\n  font-style: italic;\n}\n\n.form-control {\n  border: none;\n}\n\n.list-group {\n  margin: 0;\n}\n\n.list-group-item {\n  border: none;\n}\n\n#refresh {\n  cursor: pointer;\n  color: red;\n}\n\n[contenteditable='true']#dash {\n  white-space: nowrap;\n  overflow: hidden;\n  padding: 7px;\n  outline: 0 solid transparent;\n}\n\n.close {\n  display: none;\n  color: red !important;\n  opacity: 1;\n}\n\n.close:hover {\n  opacity: 1;\n}\n\n.ellipsis-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  right: 0;\n  margin-left: auto;\n  cursor: move;\n  width: 60px;\n}\n\n.fa-ellipsis-v {\n  color: #777;\n}\n\n.ellipsis-container:hover .fa-ellipsis-v {\n  color: #222;\n}\n\n.fa-trash-o {\n  cursor: pointer;\n  margin-left: auto;\n}\n\ninput[type='checkbox'] {\n  cursor: pointer;\n}\n\n#complete {\n  text-decoration: none !important;\n}\n\n#complete p {\n  color: #777;\n  font-size: 15px;\n  font-weight: lighter;\n}\n\n#complete p:hover {\n  color: #000;\n  text-decoration: underline;\n}\n\n.spin-animation {\n  transition: 0.9s;\n  transform: rotate(360deg);\n  -webkit-transform: rotate(360deg);\n  -ms-transform: rotate(360deg);\n}\n\n.reset {\n  cursor: pointer;\n  color: red;\n  transition: 0.5s;\n  transform: rotate(360deg);\n  -ms-transform: rotate(360deg);\n  -webkit-transform: rotate(360deg);\n}\n"],sourceRoot:""}]);const l=a},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",o=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),o&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),o&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,o,r,i){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(o)for(var l=0;l<this.length;l++){var s=this[l][0];null!=s&&(a[s]=!0)}for(var c=0;c<t.length;c++){var d=[].concat(t[c]);o&&a[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),r&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=r):d[4]="".concat(r)),e.push(d))}},e}},537:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(r," */"),a=n.sources.map((function(t){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(t," */")}));return[e].concat(a).concat([i]).join("\n")}return[e].join("\n")}},379:t=>{var e=[];function n(t){for(var n=-1,o=0;o<e.length;o++)if(e[o].identifier===t){n=o;break}return n}function o(t,o){for(var i={},a=[],l=0;l<t.length;l++){var s=t[l],c=o.base?s[0]+o.base:s[0],d=i[c]||0,u="".concat(c," ").concat(d);i[c]=d+1;var h=n(u),p={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==h)e[h].references++,e[h].updater(p);else{var f=r(p,o);o.byIndex=l,e.splice(l,0,{identifier:u,updater:f,references:1})}a.push(u)}return a}function r(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,r){var i=o(t=t||[],r=r||{});return function(t){t=t||[];for(var a=0;a<i.length;a++){var l=n(i[a]);e[l].references--}for(var s=o(t,r),c=0;c<i.length;c++){var d=n(i[c]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}i=s}}},569:t=>{var e={};t.exports=function(t,n){var o=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,r&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(o,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}},625:(t,e,n)=>{function o(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,o)}return n}function r(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?o(Object(n),!0).forEach((function(e){a(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function i(t){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i(t)}function a(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function l(){return l=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o])}return t},l.apply(this,arguments)}function s(t,e){if(null==t)return{};var n,o,r=function(t,e){if(null==t)return{};var n,o,r={},i=Object.keys(t);for(o=0;o<i.length;o++)n=i[o],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(o=0;o<i.length;o++)n=i[o],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}function c(t){if("undefined"!=typeof window&&window.navigator)return!!navigator.userAgent.match(t)}var d=c(/(?:Trident.*rv[ :]?11\.|msie|iemobile|Windows Phone)/i),u=c(/Edge/i),h=c(/firefox/i),p=c(/safari/i)&&!c(/chrome/i)&&!c(/android/i),f=c(/iP(ad|od|hone)/i),m=c(/chrome/i)&&c(/android/i),g={capture:!1,passive:!1};function v(t,e,n){t.addEventListener(e,n,!d&&g)}function A(t,e,n){t.removeEventListener(e,n,!d&&g)}function b(t,e){if(e){if(">"===e[0]&&(e=e.substring(1)),t)try{if(t.matches)return t.matches(e);if(t.msMatchesSelector)return t.msMatchesSelector(e);if(t.webkitMatchesSelector)return t.webkitMatchesSelector(e)}catch(t){return!1}return!1}}function E(t){return t.host&&t!==document&&t.host.nodeType?t.host:t.parentNode}function y(t,e,n,o){if(t){n=n||document;do{if(null!=e&&(">"===e[0]?t.parentNode===n&&b(t,e):b(t,e))||o&&t===n)return t;if(t===n)break}while(t=E(t))}return null}var w,C=/\s+/g;function S(t,e,n){if(t&&e)if(t.classList)t.classList[n?"add":"remove"](e);else{var o=(" "+t.className+" ").replace(C," ").replace(" "+e+" "," ");t.className=(o+(n?" "+e:"")).replace(C," ")}}function D(t,e,n){var o=t&&t.style;if(o){if(void 0===n)return document.defaultView&&document.defaultView.getComputedStyle?n=document.defaultView.getComputedStyle(t,""):t.currentStyle&&(n=t.currentStyle),void 0===e?n:n[e];e in o||-1!==e.indexOf("webkit")||(e="-webkit-"+e),o[e]=n+("string"==typeof n?"":"px")}}function x(t,e){var n="";if("string"==typeof t)n=t;else do{var o=D(t,"transform");o&&"none"!==o&&(n=o+" "+n)}while(!e&&(t=t.parentNode));var r=window.DOMMatrix||window.WebKitCSSMatrix||window.CSSMatrix||window.MSCSSMatrix;return r&&new r(n)}function _(t,e,n){if(t){var o=t.getElementsByTagName(e),r=0,i=o.length;if(n)for(;r<i;r++)n(o[r],r);return o}return[]}function T(){return document.scrollingElement||document.documentElement}function B(t,e,n,o,r){if(t.getBoundingClientRect||t===window){var i,a,l,s,c,u,h;if(t!==window&&t.parentNode&&t!==T()?(a=(i=t.getBoundingClientRect()).top,l=i.left,s=i.bottom,c=i.right,u=i.height,h=i.width):(a=0,l=0,s=window.innerHeight,c=window.innerWidth,u=window.innerHeight,h=window.innerWidth),(e||n)&&t!==window&&(r=r||t.parentNode,!d))do{if(r&&r.getBoundingClientRect&&("none"!==D(r,"transform")||n&&"static"!==D(r,"position"))){var p=r.getBoundingClientRect();a-=p.top+parseInt(D(r,"border-top-width")),l-=p.left+parseInt(D(r,"border-left-width")),s=a+i.height,c=l+i.width;break}}while(r=r.parentNode);if(o&&t!==window){var f=x(r||t),m=f&&f.a,g=f&&f.d;f&&(s=(a/=g)+(u/=g),c=(l/=m)+(h/=m))}return{top:a,left:l,bottom:s,right:c,width:h,height:u}}}function k(t,e,n){for(var o=P(t,!0),r=B(t)[e];o;){var i=B(o)[n];if(!("top"===n||"left"===n?r>=i:r<=i))return o;if(o===T())break;o=P(o,!1)}return!1}function N(t,e,n,o){for(var r=0,i=0,a=t.children;i<a.length;){if("none"!==a[i].style.display&&a[i]!==Rt.ghost&&(o||a[i]!==Rt.dragged)&&y(a[i],n.draggable,t,!1)){if(r===e)return a[i];r++}i++}return null}function I(t,e){for(var n=t.lastElementChild;n&&(n===Rt.ghost||"none"===D(n,"display")||e&&!b(n,e));)n=n.previousElementSibling;return n||null}function O(t,e){var n=0;if(!t||!t.parentNode)return-1;for(;t=t.previousElementSibling;)"TEMPLATE"===t.nodeName.toUpperCase()||t===Rt.clone||e&&!b(t,e)||n++;return n}function M(t){var e=0,n=0,o=T();if(t)do{var r=x(t),i=r.a,a=r.d;e+=t.scrollLeft*i,n+=t.scrollTop*a}while(t!==o&&(t=t.parentNode));return[e,n]}function P(t,e){if(!t||!t.getBoundingClientRect)return T();var n=t,o=!1;do{if(n.clientWidth<n.scrollWidth||n.clientHeight<n.scrollHeight){var r=D(n);if(n.clientWidth<n.scrollWidth&&("auto"==r.overflowX||"scroll"==r.overflowX)||n.clientHeight<n.scrollHeight&&("auto"==r.overflowY||"scroll"==r.overflowY)){if(!n.getBoundingClientRect||n===document.body)return T();if(o||e)return n;o=!0}}}while(n=n.parentNode);return T()}function L(t,e){return Math.round(t.top)===Math.round(e.top)&&Math.round(t.left)===Math.round(e.left)&&Math.round(t.height)===Math.round(e.height)&&Math.round(t.width)===Math.round(e.width)}function R(t,e){return function(){if(!w){var n=arguments,o=this;1===n.length?t.call(o,n[0]):t.apply(o,n),w=setTimeout((function(){w=void 0}),e)}}}function Y(t,e,n){t.scrollLeft+=e,t.scrollTop+=n}function X(t){var e=window.Polymer,n=window.jQuery||window.Zepto;return e&&e.dom?e.dom(t).cloneNode(!0):n?n(t).clone(!0)[0]:t.cloneNode(!0)}var j="Sortable"+(new Date).getTime();var F=[],U={initializeByDefault:!0},W={mount:function(t){for(var e in U)U.hasOwnProperty(e)&&!(e in t)&&(t[e]=U[e]);F.forEach((function(e){if(e.pluginName===t.pluginName)throw"Sortable: Cannot mount plugin ".concat(t.pluginName," more than once")})),F.push(t)},pluginEvent:function(t,e,n){var o=this;this.eventCanceled=!1,n.cancel=function(){o.eventCanceled=!0};var i=t+"Global";F.forEach((function(o){e[o.pluginName]&&(e[o.pluginName][i]&&e[o.pluginName][i](r({sortable:e},n)),e.options[o.pluginName]&&e[o.pluginName][t]&&e[o.pluginName][t](r({sortable:e},n)))}))},initializePlugins:function(t,e,n,o){for(var r in F.forEach((function(o){var r=o.pluginName;if(t.options[r]||o.initializeByDefault){var i=new o(t,e,t.options);i.sortable=t,i.options=t.options,t[r]=i,l(n,i.defaults)}})),t.options)if(t.options.hasOwnProperty(r)){var i=this.modifyOption(t,r,t.options[r]);void 0!==i&&(t.options[r]=i)}},getEventProperties:function(t,e){var n={};return F.forEach((function(o){"function"==typeof o.eventProperties&&l(n,o.eventProperties.call(e[o.pluginName],t))})),n},modifyOption:function(t,e,n){var o;return F.forEach((function(r){t[r.pluginName]&&r.optionListeners&&"function"==typeof r.optionListeners[e]&&(o=r.optionListeners[e].call(t[r.pluginName],n))})),o}};var H=["evt"],z=function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=n.evt,i=s(n,H);W.pluginEvent.bind(Rt)(t,e,r({dragEl:V,parentEl:G,ghostEl:q,rootEl:J,nextEl:Q,lastDownEl:K,cloneEl:$,cloneHidden:tt,dragStarted:pt,putSortable:at,activeSortable:Rt.active,originalEvent:o,oldIndex:et,oldDraggableIndex:ot,newIndex:nt,newDraggableIndex:rt,hideGhostForTarget:Ot,unhideGhostForTarget:Mt,cloneNowHidden:function(){tt=!0},cloneNowShown:function(){tt=!1},dispatchSortableEvent:function(t){Z({sortable:e,name:t,originalEvent:o})}},i))};function Z(t){!function(t){var e=t.sortable,n=t.rootEl,o=t.name,i=t.targetEl,a=t.cloneEl,l=t.toEl,s=t.fromEl,c=t.oldIndex,h=t.newIndex,p=t.oldDraggableIndex,f=t.newDraggableIndex,m=t.originalEvent,g=t.putSortable,v=t.extraEventProperties;if(e=e||n&&n[j]){var A,b=e.options,E="on"+o.charAt(0).toUpperCase()+o.substr(1);!window.CustomEvent||d||u?(A=document.createEvent("Event")).initEvent(o,!0,!0):A=new CustomEvent(o,{bubbles:!0,cancelable:!0}),A.to=l||n,A.from=s||n,A.item=i||n,A.clone=a,A.oldIndex=c,A.newIndex=h,A.oldDraggableIndex=p,A.newDraggableIndex=f,A.originalEvent=m,A.pullMode=g?g.lastPutMode:void 0;var y=r(r({},v),W.getEventProperties(o,e));for(var w in y)A[w]=y[w];n&&n.dispatchEvent(A),b[E]&&b[E].call(e,A)}}(r({putSortable:at,cloneEl:$,targetEl:V,rootEl:J,oldIndex:et,oldDraggableIndex:ot,newIndex:nt,newDraggableIndex:rt},t))}var V,G,q,J,Q,K,$,tt,et,nt,ot,rt,it,at,lt,st,ct,dt,ut,ht,pt,ft,mt,gt,vt,At=!1,bt=!1,Et=[],yt=!1,wt=!1,Ct=[],St=!1,Dt=[],xt="undefined"!=typeof document,_t=f,Tt=u||d?"cssFloat":"float",Bt=xt&&!m&&!f&&"draggable"in document.createElement("div"),kt=function(){if(xt){if(d)return!1;var t=document.createElement("x");return t.style.cssText="pointer-events:auto","auto"===t.style.pointerEvents}}(),Nt=function(t,e){var n=D(t),o=parseInt(n.width)-parseInt(n.paddingLeft)-parseInt(n.paddingRight)-parseInt(n.borderLeftWidth)-parseInt(n.borderRightWidth),r=N(t,0,e),i=N(t,1,e),a=r&&D(r),l=i&&D(i),s=a&&parseInt(a.marginLeft)+parseInt(a.marginRight)+B(r).width,c=l&&parseInt(l.marginLeft)+parseInt(l.marginRight)+B(i).width;if("flex"===n.display)return"column"===n.flexDirection||"column-reverse"===n.flexDirection?"vertical":"horizontal";if("grid"===n.display)return n.gridTemplateColumns.split(" ").length<=1?"vertical":"horizontal";if(r&&a.float&&"none"!==a.float){var d="left"===a.float?"left":"right";return!i||"both"!==l.clear&&l.clear!==d?"horizontal":"vertical"}return r&&("block"===a.display||"flex"===a.display||"table"===a.display||"grid"===a.display||s>=o&&"none"===n[Tt]||i&&"none"===n[Tt]&&s+c>o)?"vertical":"horizontal"},It=function(t){function e(t,n){return function(o,r,i,a){var l=o.options.group.name&&r.options.group.name&&o.options.group.name===r.options.group.name;if(null==t&&(n||l))return!0;if(null==t||!1===t)return!1;if(n&&"clone"===t)return t;if("function"==typeof t)return e(t(o,r,i,a),n)(o,r,i,a);var s=(n?o:r).options.group.name;return!0===t||"string"==typeof t&&t===s||t.join&&t.indexOf(s)>-1}}var n={},o=t.group;o&&"object"==i(o)||(o={name:o}),n.name=o.name,n.checkPull=e(o.pull,!0),n.checkPut=e(o.put),n.revertClone=o.revertClone,t.group=n},Ot=function(){!kt&&q&&D(q,"display","none")},Mt=function(){!kt&&q&&D(q,"display","")};xt&&!m&&document.addEventListener("click",(function(t){if(bt)return t.preventDefault(),t.stopPropagation&&t.stopPropagation(),t.stopImmediatePropagation&&t.stopImmediatePropagation(),bt=!1,!1}),!0);var Pt=function(t){if(V){t=t.touches?t.touches[0]:t;var e=(r=t.clientX,i=t.clientY,Et.some((function(t){var e=t[j].options.emptyInsertThreshold;if(e&&!I(t)){var n=B(t),o=r>=n.left-e&&r<=n.right+e,l=i>=n.top-e&&i<=n.bottom+e;return o&&l?a=t:void 0}})),a);if(e){var n={};for(var o in t)t.hasOwnProperty(o)&&(n[o]=t[o]);n.target=n.rootEl=e,n.preventDefault=void 0,n.stopPropagation=void 0,e[j]._onDragOver(n)}}var r,i,a},Lt=function(t){V&&V.parentNode[j]._isOutsideThisEl(t.target)};function Rt(t,e){if(!t||!t.nodeType||1!==t.nodeType)throw"Sortable: `el` must be an HTMLElement, not ".concat({}.toString.call(t));this.el=t,this.options=e=l({},e),t[j]=this;var n,o,i={group:null,sort:!0,disabled:!1,store:null,handle:null,draggable:/^[uo]l$/i.test(t.nodeName)?">li":">*",swapThreshold:1,invertSwap:!1,invertedSwapThreshold:null,removeCloneOnHide:!0,direction:function(){return Nt(t,this.options)},ghostClass:"sortable-ghost",chosenClass:"sortable-chosen",dragClass:"sortable-drag",ignore:"a, img",filter:null,preventOnFilter:!0,animation:0,easing:null,setData:function(t,e){t.setData("Text",e.textContent)},dropBubble:!1,dragoverBubble:!1,dataIdAttr:"data-id",delay:0,delayOnTouchOnly:!1,touchStartThreshold:(Number.parseInt?Number:window).parseInt(window.devicePixelRatio,10)||1,forceFallback:!1,fallbackClass:"sortable-fallback",fallbackOnBody:!1,fallbackTolerance:0,fallbackOffset:{x:0,y:0},supportPointer:!1!==Rt.supportPointer&&"PointerEvent"in window&&!p,emptyInsertThreshold:5};for(var a in W.initializePlugins(this,t,i),i)!(a in e)&&(e[a]=i[a]);for(var s in It(e),this)"_"===s.charAt(0)&&"function"==typeof this[s]&&(this[s]=this[s].bind(this));this.nativeDraggable=!e.forceFallback&&Bt,this.nativeDraggable&&(this.options.touchStartThreshold=1),e.supportPointer?v(t,"pointerdown",this._onTapStart):(v(t,"mousedown",this._onTapStart),v(t,"touchstart",this._onTapStart)),this.nativeDraggable&&(v(t,"dragover",this),v(t,"dragenter",this)),Et.push(this.el),e.store&&e.store.get&&this.sort(e.store.get(this)||[]),l(this,(o=[],{captureAnimationState:function(){o=[],this.options.animation&&[].slice.call(this.el.children).forEach((function(t){if("none"!==D(t,"display")&&t!==Rt.ghost){o.push({target:t,rect:B(t)});var e=r({},o[o.length-1].rect);if(t.thisAnimationDuration){var n=x(t,!0);n&&(e.top-=n.f,e.left-=n.e)}t.fromRect=e}}))},addAnimationState:function(t){o.push(t)},removeAnimationState:function(t){o.splice(function(t,e){for(var n in t)if(t.hasOwnProperty(n))for(var o in e)if(e.hasOwnProperty(o)&&e[o]===t[n][o])return Number(n);return-1}(o,{target:t}),1)},animateAll:function(t){var e=this;if(!this.options.animation)return clearTimeout(n),void("function"==typeof t&&t());var r=!1,i=0;o.forEach((function(t){var n=0,o=t.target,a=o.fromRect,l=B(o),s=o.prevFromRect,c=o.prevToRect,d=t.rect,u=x(o,!0);u&&(l.top-=u.f,l.left-=u.e),o.toRect=l,o.thisAnimationDuration&&L(s,l)&&!L(a,l)&&(d.top-l.top)/(d.left-l.left)==(a.top-l.top)/(a.left-l.left)&&(n=function(t,e,n,o){return Math.sqrt(Math.pow(e.top-t.top,2)+Math.pow(e.left-t.left,2))/Math.sqrt(Math.pow(e.top-n.top,2)+Math.pow(e.left-n.left,2))*o.animation}(d,s,c,e.options)),L(l,a)||(o.prevFromRect=a,o.prevToRect=l,n||(n=e.options.animation),e.animate(o,d,l,n)),n&&(r=!0,i=Math.max(i,n),clearTimeout(o.animationResetTimer),o.animationResetTimer=setTimeout((function(){o.animationTime=0,o.prevFromRect=null,o.fromRect=null,o.prevToRect=null,o.thisAnimationDuration=null}),n),o.thisAnimationDuration=n)})),clearTimeout(n),r?n=setTimeout((function(){"function"==typeof t&&t()}),i):"function"==typeof t&&t(),o=[]},animate:function(t,e,n,o){if(o){D(t,"transition",""),D(t,"transform","");var r=x(this.el),i=r&&r.a,a=r&&r.d,l=(e.left-n.left)/(i||1),s=(e.top-n.top)/(a||1);t.animatingX=!!l,t.animatingY=!!s,D(t,"transform","translate3d("+l+"px,"+s+"px,0)"),this.forRepaintDummy=function(t){return t.offsetWidth}(t),D(t,"transition","transform "+o+"ms"+(this.options.easing?" "+this.options.easing:"")),D(t,"transform","translate3d(0,0,0)"),"number"==typeof t.animated&&clearTimeout(t.animated),t.animated=setTimeout((function(){D(t,"transition",""),D(t,"transform",""),t.animated=!1,t.animatingX=!1,t.animatingY=!1}),o)}}}))}function Yt(t,e,n,o,r,i,a,l){var s,c,h=t[j],p=h.options.onMove;return!window.CustomEvent||d||u?(s=document.createEvent("Event")).initEvent("move",!0,!0):s=new CustomEvent("move",{bubbles:!0,cancelable:!0}),s.to=e,s.from=t,s.dragged=n,s.draggedRect=o,s.related=r||e,s.relatedRect=i||B(e),s.willInsertAfter=l,s.originalEvent=a,t.dispatchEvent(s),p&&(c=p.call(h,s,a)),c}function Xt(t){t.draggable=!1}function jt(){St=!1}function Ft(t){for(var e=t.tagName+t.className+t.src+t.href+t.textContent,n=e.length,o=0;n--;)o+=e.charCodeAt(n);return o.toString(36)}function Ut(t){return setTimeout(t,0)}function Wt(t){return clearTimeout(t)}Rt.prototype={constructor:Rt,_isOutsideThisEl:function(t){this.el.contains(t)||t===this.el||(ft=null)},_getDirection:function(t,e){return"function"==typeof this.options.direction?this.options.direction.call(this,t,e,V):this.options.direction},_onTapStart:function(t){if(t.cancelable){var e=this,n=this.el,o=this.options,r=o.preventOnFilter,i=t.type,a=t.touches&&t.touches[0]||t.pointerType&&"touch"===t.pointerType&&t,l=(a||t).target,s=t.target.shadowRoot&&(t.path&&t.path[0]||t.composedPath&&t.composedPath()[0])||l,c=o.filter;if(function(t){Dt.length=0;for(var e=t.getElementsByTagName("input"),n=e.length;n--;){var o=e[n];o.checked&&Dt.push(o)}}(n),!V&&!(/mousedown|pointerdown/.test(i)&&0!==t.button||o.disabled)&&!s.isContentEditable&&(this.nativeDraggable||!p||!l||"SELECT"!==l.tagName.toUpperCase())&&!((l=y(l,o.draggable,n,!1))&&l.animated||K===l)){if(et=O(l),ot=O(l,o.draggable),"function"==typeof c){if(c.call(this,t,l,this))return Z({sortable:e,rootEl:s,name:"filter",targetEl:l,toEl:n,fromEl:n}),z("filter",e,{evt:t}),void(r&&t.cancelable&&t.preventDefault())}else if(c&&(c=c.split(",").some((function(o){if(o=y(s,o.trim(),n,!1))return Z({sortable:e,rootEl:o,name:"filter",targetEl:l,fromEl:n,toEl:n}),z("filter",e,{evt:t}),!0}))))return void(r&&t.cancelable&&t.preventDefault());o.handle&&!y(s,o.handle,n,!1)||this._prepareDragStart(t,a,l)}}},_prepareDragStart:function(t,e,n){var o,r=this,i=r.el,a=r.options,l=i.ownerDocument;if(n&&!V&&n.parentNode===i){var s=B(n);if(J=i,G=(V=n).parentNode,Q=V.nextSibling,K=n,it=a.group,Rt.dragged=V,lt={target:V,clientX:(e||t).clientX,clientY:(e||t).clientY},ut=lt.clientX-s.left,ht=lt.clientY-s.top,this._lastX=(e||t).clientX,this._lastY=(e||t).clientY,V.style["will-change"]="all",o=function(){z("delayEnded",r,{evt:t}),Rt.eventCanceled?r._onDrop():(r._disableDelayedDragEvents(),!h&&r.nativeDraggable&&(V.draggable=!0),r._triggerDragStart(t,e),Z({sortable:r,name:"choose",originalEvent:t}),S(V,a.chosenClass,!0))},a.ignore.split(",").forEach((function(t){_(V,t.trim(),Xt)})),v(l,"dragover",Pt),v(l,"mousemove",Pt),v(l,"touchmove",Pt),v(l,"mouseup",r._onDrop),v(l,"touchend",r._onDrop),v(l,"touchcancel",r._onDrop),h&&this.nativeDraggable&&(this.options.touchStartThreshold=4,V.draggable=!0),z("delayStart",this,{evt:t}),!a.delay||a.delayOnTouchOnly&&!e||this.nativeDraggable&&(u||d))o();else{if(Rt.eventCanceled)return void this._onDrop();v(l,"mouseup",r._disableDelayedDrag),v(l,"touchend",r._disableDelayedDrag),v(l,"touchcancel",r._disableDelayedDrag),v(l,"mousemove",r._delayedDragTouchMoveHandler),v(l,"touchmove",r._delayedDragTouchMoveHandler),a.supportPointer&&v(l,"pointermove",r._delayedDragTouchMoveHandler),r._dragStartTimer=setTimeout(o,a.delay)}}},_delayedDragTouchMoveHandler:function(t){var e=t.touches?t.touches[0]:t;Math.max(Math.abs(e.clientX-this._lastX),Math.abs(e.clientY-this._lastY))>=Math.floor(this.options.touchStartThreshold/(this.nativeDraggable&&window.devicePixelRatio||1))&&this._disableDelayedDrag()},_disableDelayedDrag:function(){V&&Xt(V),clearTimeout(this._dragStartTimer),this._disableDelayedDragEvents()},_disableDelayedDragEvents:function(){var t=this.el.ownerDocument;A(t,"mouseup",this._disableDelayedDrag),A(t,"touchend",this._disableDelayedDrag),A(t,"touchcancel",this._disableDelayedDrag),A(t,"mousemove",this._delayedDragTouchMoveHandler),A(t,"touchmove",this._delayedDragTouchMoveHandler),A(t,"pointermove",this._delayedDragTouchMoveHandler)},_triggerDragStart:function(t,e){e=e||"touch"==t.pointerType&&t,!this.nativeDraggable||e?this.options.supportPointer?v(document,"pointermove",this._onTouchMove):v(document,e?"touchmove":"mousemove",this._onTouchMove):(v(V,"dragend",this),v(J,"dragstart",this._onDragStart));try{document.selection?Ut((function(){document.selection.empty()})):window.getSelection().removeAllRanges()}catch(t){}},_dragStarted:function(t,e){if(At=!1,J&&V){z("dragStarted",this,{evt:e}),this.nativeDraggable&&v(document,"dragover",Lt);var n=this.options;!t&&S(V,n.dragClass,!1),S(V,n.ghostClass,!0),Rt.active=this,t&&this._appendGhost(),Z({sortable:this,name:"start",originalEvent:e})}else this._nulling()},_emulateDragOver:function(){if(st){this._lastX=st.clientX,this._lastY=st.clientY,Ot();for(var t=document.elementFromPoint(st.clientX,st.clientY),e=t;t&&t.shadowRoot&&(t=t.shadowRoot.elementFromPoint(st.clientX,st.clientY))!==e;)e=t;if(V.parentNode[j]._isOutsideThisEl(t),e)do{if(e[j]&&e[j]._onDragOver({clientX:st.clientX,clientY:st.clientY,target:t,rootEl:e})&&!this.options.dragoverBubble)break;t=e}while(e=e.parentNode);Mt()}},_onTouchMove:function(t){if(lt){var e=this.options,n=e.fallbackTolerance,o=e.fallbackOffset,r=t.touches?t.touches[0]:t,i=q&&x(q,!0),a=q&&i&&i.a,l=q&&i&&i.d,s=_t&&vt&&M(vt),c=(r.clientX-lt.clientX+o.x)/(a||1)+(s?s[0]-Ct[0]:0)/(a||1),d=(r.clientY-lt.clientY+o.y)/(l||1)+(s?s[1]-Ct[1]:0)/(l||1);if(!Rt.active&&!At){if(n&&Math.max(Math.abs(r.clientX-this._lastX),Math.abs(r.clientY-this._lastY))<n)return;this._onDragStart(t,!0)}if(q){i?(i.e+=c-(ct||0),i.f+=d-(dt||0)):i={a:1,b:0,c:0,d:1,e:c,f:d};var u="matrix(".concat(i.a,",").concat(i.b,",").concat(i.c,",").concat(i.d,",").concat(i.e,",").concat(i.f,")");D(q,"webkitTransform",u),D(q,"mozTransform",u),D(q,"msTransform",u),D(q,"transform",u),ct=c,dt=d,st=r}t.cancelable&&t.preventDefault()}},_appendGhost:function(){if(!q){var t=this.options.fallbackOnBody?document.body:J,e=B(V,!0,_t,!0,t),n=this.options;if(_t){for(vt=t;"static"===D(vt,"position")&&"none"===D(vt,"transform")&&vt!==document;)vt=vt.parentNode;vt!==document.body&&vt!==document.documentElement?(vt===document&&(vt=T()),e.top+=vt.scrollTop,e.left+=vt.scrollLeft):vt=T(),Ct=M(vt)}S(q=V.cloneNode(!0),n.ghostClass,!1),S(q,n.fallbackClass,!0),S(q,n.dragClass,!0),D(q,"transition",""),D(q,"transform",""),D(q,"box-sizing","border-box"),D(q,"margin",0),D(q,"top",e.top),D(q,"left",e.left),D(q,"width",e.width),D(q,"height",e.height),D(q,"opacity","0.8"),D(q,"position",_t?"absolute":"fixed"),D(q,"zIndex","100000"),D(q,"pointerEvents","none"),Rt.ghost=q,t.appendChild(q),D(q,"transform-origin",ut/parseInt(q.style.width)*100+"% "+ht/parseInt(q.style.height)*100+"%")}},_onDragStart:function(t,e){var n=this,o=t.dataTransfer,r=n.options;z("dragStart",this,{evt:t}),Rt.eventCanceled?this._onDrop():(z("setupClone",this),Rt.eventCanceled||(($=X(V)).removeAttribute("id"),$.draggable=!1,$.style["will-change"]="",this._hideClone(),S($,this.options.chosenClass,!1),Rt.clone=$),n.cloneId=Ut((function(){z("clone",n),Rt.eventCanceled||(n.options.removeCloneOnHide||J.insertBefore($,V),n._hideClone(),Z({sortable:n,name:"clone"}))})),!e&&S(V,r.dragClass,!0),e?(bt=!0,n._loopId=setInterval(n._emulateDragOver,50)):(A(document,"mouseup",n._onDrop),A(document,"touchend",n._onDrop),A(document,"touchcancel",n._onDrop),o&&(o.effectAllowed="move",r.setData&&r.setData.call(n,o,V)),v(document,"drop",n),D(V,"transform","translateZ(0)")),At=!0,n._dragStartId=Ut(n._dragStarted.bind(n,e,t)),v(document,"selectstart",n),pt=!0,p&&D(document.body,"user-select","none"))},_onDragOver:function(t){var e,n,o,i,a=this.el,l=t.target,s=this.options,c=s.group,d=Rt.active,u=it===c,h=s.sort,p=at||d,f=this,m=!1;if(!St){if(void 0!==t.preventDefault&&t.cancelable&&t.preventDefault(),l=y(l,s.draggable,a,!0),X("dragOver"),Rt.eventCanceled)return m;if(V.contains(t.target)||l.animated&&l.animatingX&&l.animatingY||f._ignoreWhileAnimating===l)return U(!1);if(bt=!1,d&&!s.disabled&&(u?h||(o=G!==J):at===this||(this.lastPutMode=it.checkPull(this,d,V,t))&&c.checkPut(this,d,V,t))){if(i="vertical"===this._getDirection(t,l),e=B(V),X("dragOverValid"),Rt.eventCanceled)return m;if(o)return G=J,F(),this._hideClone(),X("revert"),Rt.eventCanceled||(Q?J.insertBefore(V,Q):J.appendChild(V)),U(!0);var g=I(a,s.draggable);if(!g||function(t,e,n){var o=B(I(n.el,n.options.draggable));return e?t.clientX>o.right+10||t.clientX<=o.right&&t.clientY>o.bottom&&t.clientX>=o.left:t.clientX>o.right&&t.clientY>o.top||t.clientX<=o.right&&t.clientY>o.bottom+10}(t,i,this)&&!g.animated){if(g===V)return U(!1);if(g&&a===t.target&&(l=g),l&&(n=B(l)),!1!==Yt(J,a,V,e,l,n,t,!!l))return F(),g&&g.nextSibling?a.insertBefore(V,g.nextSibling):a.appendChild(V),G=a,W(),U(!0)}else if(g&&function(t,e,n){var o=B(N(n.el,0,n.options,!0));return e?t.clientX<o.left-10||t.clientY<o.top&&t.clientX<o.right:t.clientY<o.top-10||t.clientY<o.bottom&&t.clientX<o.left}(t,i,this)){var v=N(a,0,s,!0);if(v===V)return U(!1);if(n=B(l=v),!1!==Yt(J,a,V,e,l,n,t,!1))return F(),a.insertBefore(V,v),G=a,W(),U(!0)}else if(l.parentNode===a){n=B(l);var A,b,E,w=V.parentNode!==a,C=!function(t,e,n){var o=n?t.left:t.top,r=n?t.right:t.bottom,i=n?t.width:t.height,a=n?e.left:e.top,l=n?e.right:e.bottom,s=n?e.width:e.height;return o===a||r===l||o+i/2===a+s/2}(V.animated&&V.toRect||e,l.animated&&l.toRect||n,i),x=i?"top":"left",_=k(l,"top","top")||k(V,"top","top"),T=_?_.scrollTop:void 0;if(ft!==l&&(b=n[x],yt=!1,wt=!C&&s.invertSwap||w),A=function(t,e,n,o,r,i,a,l){var s=o?t.clientY:t.clientX,c=o?n.height:n.width,d=o?n.top:n.left,u=o?n.bottom:n.right,h=!1;if(!a)if(l&&gt<c*r){if(!yt&&(1===mt?s>d+c*i/2:s<u-c*i/2)&&(yt=!0),yt)h=!0;else if(1===mt?s<d+gt:s>u-gt)return-mt}else if(s>d+c*(1-r)/2&&s<u-c*(1-r)/2)return function(t){return O(V)<O(t)?1:-1}(e);return(h=h||a)&&(s<d+c*i/2||s>u-c*i/2)?s>d+c/2?1:-1:0}(t,l,n,i,C?1:s.swapThreshold,null==s.invertedSwapThreshold?s.swapThreshold:s.invertedSwapThreshold,wt,ft===l),0!==A){var M=O(V);do{M-=A,E=G.children[M]}while(E&&("none"===D(E,"display")||E===q))}if(0===A||E===l)return U(!1);ft=l,mt=A;var P=l.nextElementSibling,L=!1,R=Yt(J,a,V,e,l,n,t,L=1===A);if(!1!==R)return 1!==R&&-1!==R||(L=1===R),St=!0,setTimeout(jt,30),F(),L&&!P?a.appendChild(V):l.parentNode.insertBefore(V,L?P:l),_&&Y(_,0,T-_.scrollTop),G=V.parentNode,void 0===b||wt||(gt=Math.abs(b-B(l)[x])),W(),U(!0)}if(a.contains(V))return U(!1)}return!1}function X(s,c){z(s,f,r({evt:t,isOwner:u,axis:i?"vertical":"horizontal",revert:o,dragRect:e,targetRect:n,canSort:h,fromSortable:p,target:l,completed:U,onMove:function(n,o){return Yt(J,a,V,e,n,B(n),t,o)},changed:W},c))}function F(){X("dragOverAnimationCapture"),f.captureAnimationState(),f!==p&&p.captureAnimationState()}function U(e){return X("dragOverCompleted",{insertion:e}),e&&(u?d._hideClone():d._showClone(f),f!==p&&(S(V,at?at.options.ghostClass:d.options.ghostClass,!1),S(V,s.ghostClass,!0)),at!==f&&f!==Rt.active?at=f:f===Rt.active&&at&&(at=null),p===f&&(f._ignoreWhileAnimating=l),f.animateAll((function(){X("dragOverAnimationComplete"),f._ignoreWhileAnimating=null})),f!==p&&(p.animateAll(),p._ignoreWhileAnimating=null)),(l===V&&!V.animated||l===a&&!l.animated)&&(ft=null),s.dragoverBubble||t.rootEl||l===document||(V.parentNode[j]._isOutsideThisEl(t.target),!e&&Pt(t)),!s.dragoverBubble&&t.stopPropagation&&t.stopPropagation(),m=!0}function W(){nt=O(V),rt=O(V,s.draggable),Z({sortable:f,name:"change",toEl:a,newIndex:nt,newDraggableIndex:rt,originalEvent:t})}},_ignoreWhileAnimating:null,_offMoveEvents:function(){A(document,"mousemove",this._onTouchMove),A(document,"touchmove",this._onTouchMove),A(document,"pointermove",this._onTouchMove),A(document,"dragover",Pt),A(document,"mousemove",Pt),A(document,"touchmove",Pt)},_offUpEvents:function(){var t=this.el.ownerDocument;A(t,"mouseup",this._onDrop),A(t,"touchend",this._onDrop),A(t,"pointerup",this._onDrop),A(t,"touchcancel",this._onDrop),A(document,"selectstart",this)},_onDrop:function(t){var e=this.el,n=this.options;nt=O(V),rt=O(V,n.draggable),z("drop",this,{evt:t}),G=V&&V.parentNode,nt=O(V),rt=O(V,n.draggable),Rt.eventCanceled||(At=!1,wt=!1,yt=!1,clearInterval(this._loopId),clearTimeout(this._dragStartTimer),Wt(this.cloneId),Wt(this._dragStartId),this.nativeDraggable&&(A(document,"drop",this),A(e,"dragstart",this._onDragStart)),this._offMoveEvents(),this._offUpEvents(),p&&D(document.body,"user-select",""),D(V,"transform",""),t&&(pt&&(t.cancelable&&t.preventDefault(),!n.dropBubble&&t.stopPropagation()),q&&q.parentNode&&q.parentNode.removeChild(q),(J===G||at&&"clone"!==at.lastPutMode)&&$&&$.parentNode&&$.parentNode.removeChild($),V&&(this.nativeDraggable&&A(V,"dragend",this),Xt(V),V.style["will-change"]="",pt&&!At&&S(V,at?at.options.ghostClass:this.options.ghostClass,!1),S(V,this.options.chosenClass,!1),Z({sortable:this,name:"unchoose",toEl:G,newIndex:null,newDraggableIndex:null,originalEvent:t}),J!==G?(nt>=0&&(Z({rootEl:G,name:"add",toEl:G,fromEl:J,originalEvent:t}),Z({sortable:this,name:"remove",toEl:G,originalEvent:t}),Z({rootEl:G,name:"sort",toEl:G,fromEl:J,originalEvent:t}),Z({sortable:this,name:"sort",toEl:G,originalEvent:t})),at&&at.save()):nt!==et&&nt>=0&&(Z({sortable:this,name:"update",toEl:G,originalEvent:t}),Z({sortable:this,name:"sort",toEl:G,originalEvent:t})),Rt.active&&(null!=nt&&-1!==nt||(nt=et,rt=ot),Z({sortable:this,name:"end",toEl:G,originalEvent:t}),this.save())))),this._nulling()},_nulling:function(){z("nulling",this),J=V=G=q=Q=$=K=tt=lt=st=pt=nt=rt=et=ot=ft=mt=at=it=Rt.dragged=Rt.ghost=Rt.clone=Rt.active=null,Dt.forEach((function(t){t.checked=!0})),Dt.length=ct=dt=0},handleEvent:function(t){switch(t.type){case"drop":case"dragend":this._onDrop(t);break;case"dragenter":case"dragover":V&&(this._onDragOver(t),function(t){t.dataTransfer&&(t.dataTransfer.dropEffect="move"),t.cancelable&&t.preventDefault()}(t));break;case"selectstart":t.preventDefault()}},toArray:function(){for(var t,e=[],n=this.el.children,o=0,r=n.length,i=this.options;o<r;o++)y(t=n[o],i.draggable,this.el,!1)&&e.push(t.getAttribute(i.dataIdAttr)||Ft(t));return e},sort:function(t,e){var n={},o=this.el;this.toArray().forEach((function(t,e){var r=o.children[e];y(r,this.options.draggable,o,!1)&&(n[t]=r)}),this),e&&this.captureAnimationState(),t.forEach((function(t){n[t]&&(o.removeChild(n[t]),o.appendChild(n[t]))})),e&&this.animateAll()},save:function(){var t=this.options.store;t&&t.set&&t.set(this)},closest:function(t,e){return y(t,e||this.options.draggable,this.el,!1)},option:function(t,e){var n=this.options;if(void 0===e)return n[t];var o=W.modifyOption(this,t,e);n[t]=void 0!==o?o:e,"group"===t&&It(n)},destroy:function(){z("destroy",this);var t=this.el;t[j]=null,A(t,"mousedown",this._onTapStart),A(t,"touchstart",this._onTapStart),A(t,"pointerdown",this._onTapStart),this.nativeDraggable&&(A(t,"dragover",this),A(t,"dragenter",this)),Array.prototype.forEach.call(t.querySelectorAll("[draggable]"),(function(t){t.removeAttribute("draggable")})),this._onDrop(),this._disableDelayedDragEvents(),Et.splice(Et.indexOf(this.el),1),this.el=t=null},_hideClone:function(){if(!tt){if(z("hideClone",this),Rt.eventCanceled)return;D($,"display","none"),this.options.removeCloneOnHide&&$.parentNode&&$.parentNode.removeChild($),tt=!0}},_showClone:function(t){if("clone"===t.lastPutMode){if(tt){if(z("showClone",this),Rt.eventCanceled)return;V.parentNode!=J||this.options.group.revertClone?Q?J.insertBefore($,Q):J.appendChild($):J.insertBefore($,V),this.options.group.revertClone&&this.animate(V,$),D($,"display",""),tt=!1}}else this._hideClone()}},xt&&v(document,"touchmove",(function(t){(Rt.active||At)&&t.cancelable&&t.preventDefault()})),Rt.utils={on:v,off:A,css:D,find:_,is:function(t,e){return!!y(t,e,t,!1)},extend:function(t,e){if(t&&e)for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t},throttle:R,closest:y,toggleClass:S,clone:X,index:O,nextTick:Ut,cancelNextTick:Wt,detectDirection:Nt,getChild:N},Rt.get=function(t){return t[j]},Rt.mount=function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];e[0].constructor===Array&&(e=e[0]),e.forEach((function(t){if(!t.prototype||!t.prototype.constructor)throw"Sortable: Mounted plugin must be a constructor function, not ".concat({}.toString.call(t));t.utils&&(Rt.utils=r(r({},Rt.utils),t.utils)),W.mount(t)}))},Rt.create=function(t,e){return new Rt(t,e)},Rt.version="1.15.0";var Ht,zt,Zt,Vt,Gt,qt,Jt=[],Qt=!1;function Kt(){Jt.forEach((function(t){clearInterval(t.pid)})),Jt=[]}function $t(){clearInterval(qt)}var te=R((function(t,e,n,o){if(e.scroll){var r,i=(t.touches?t.touches[0]:t).clientX,a=(t.touches?t.touches[0]:t).clientY,l=e.scrollSensitivity,s=e.scrollSpeed,c=T(),d=!1;zt!==n&&(zt=n,Kt(),Ht=e.scroll,r=e.scrollFn,!0===Ht&&(Ht=P(n,!0)));var u=0,h=Ht;do{var p=h,f=B(p),m=f.top,g=f.bottom,v=f.left,A=f.right,b=f.width,E=f.height,y=void 0,w=void 0,C=p.scrollWidth,S=p.scrollHeight,x=D(p),_=p.scrollLeft,k=p.scrollTop;p===c?(y=b<C&&("auto"===x.overflowX||"scroll"===x.overflowX||"visible"===x.overflowX),w=E<S&&("auto"===x.overflowY||"scroll"===x.overflowY||"visible"===x.overflowY)):(y=b<C&&("auto"===x.overflowX||"scroll"===x.overflowX),w=E<S&&("auto"===x.overflowY||"scroll"===x.overflowY));var N=y&&(Math.abs(A-i)<=l&&_+b<C)-(Math.abs(v-i)<=l&&!!_),I=w&&(Math.abs(g-a)<=l&&k+E<S)-(Math.abs(m-a)<=l&&!!k);if(!Jt[u])for(var O=0;O<=u;O++)Jt[O]||(Jt[O]={});Jt[u].vx==N&&Jt[u].vy==I&&Jt[u].el===p||(Jt[u].el=p,Jt[u].vx=N,Jt[u].vy=I,clearInterval(Jt[u].pid),0==N&&0==I||(d=!0,Jt[u].pid=setInterval(function(){o&&0===this.layer&&Rt.active._onTouchMove(Gt);var e=Jt[this.layer].vy?Jt[this.layer].vy*s:0,n=Jt[this.layer].vx?Jt[this.layer].vx*s:0;"function"==typeof r&&"continue"!==r.call(Rt.dragged.parentNode[j],n,e,t,Gt,Jt[this.layer].el)||Y(Jt[this.layer].el,n,e)}.bind({layer:u}),24))),u++}while(e.bubbleScroll&&h!==c&&(h=P(h,!1)));Qt=d}}),30),ee=function(t){var e=t.originalEvent,n=t.putSortable,o=t.dragEl,r=t.activeSortable,i=t.dispatchSortableEvent,a=t.hideGhostForTarget,l=t.unhideGhostForTarget;if(e){var s=n||r;a();var c=e.changedTouches&&e.changedTouches.length?e.changedTouches[0]:e,d=document.elementFromPoint(c.clientX,c.clientY);l(),s&&!s.el.contains(d)&&(i("spill"),this.onSpill({dragEl:o,putSortable:n}))}};function ne(){}function oe(){}ne.prototype={startIndex:null,dragStart:function(t){var e=t.oldDraggableIndex;this.startIndex=e},onSpill:function(t){var e=t.dragEl,n=t.putSortable;this.sortable.captureAnimationState(),n&&n.captureAnimationState();var o=N(this.sortable.el,this.startIndex,this.options);o?this.sortable.el.insertBefore(e,o):this.sortable.el.appendChild(e),this.sortable.animateAll(),n&&n.animateAll()},drop:ee},l(ne,{pluginName:"revertOnSpill"}),oe.prototype={onSpill:function(t){var e=t.dragEl,n=t.putSortable||this.sortable;n.captureAnimationState(),e.parentNode&&e.parentNode.removeChild(e),n.animateAll()},drop:ee},l(oe,{pluginName:"removeOnSpill"}),Rt.mount(new function(){function t(){for(var t in this.defaults={scroll:!0,forceAutoScrollFallback:!1,scrollSensitivity:30,scrollSpeed:10,bubbleScroll:!0},this)"_"===t.charAt(0)&&"function"==typeof this[t]&&(this[t]=this[t].bind(this))}return t.prototype={dragStarted:function(t){var e=t.originalEvent;this.sortable.nativeDraggable?v(document,"dragover",this._handleAutoScroll):this.options.supportPointer?v(document,"pointermove",this._handleFallbackAutoScroll):e.touches?v(document,"touchmove",this._handleFallbackAutoScroll):v(document,"mousemove",this._handleFallbackAutoScroll)},dragOverCompleted:function(t){var e=t.originalEvent;this.options.dragOverBubble||e.rootEl||this._handleAutoScroll(e)},drop:function(){this.sortable.nativeDraggable?A(document,"dragover",this._handleAutoScroll):(A(document,"pointermove",this._handleFallbackAutoScroll),A(document,"touchmove",this._handleFallbackAutoScroll),A(document,"mousemove",this._handleFallbackAutoScroll)),$t(),Kt(),clearTimeout(w),w=void 0},nulling:function(){Gt=zt=Ht=Qt=qt=Zt=Vt=null,Jt.length=0},_handleFallbackAutoScroll:function(t){this._handleAutoScroll(t,!0)},_handleAutoScroll:function(t,e){var n=this,o=(t.touches?t.touches[0]:t).clientX,r=(t.touches?t.touches[0]:t).clientY,i=document.elementFromPoint(o,r);if(Gt=t,e||this.options.forceAutoScrollFallback||u||d||p){te(t,this.options,i,e);var a=P(i,!0);!Qt||qt&&o===Zt&&r===Vt||(qt&&$t(),qt=setInterval((function(){var i=P(document.elementFromPoint(o,r),!0);i!==a&&(a=i,Kt()),te(t,n.options,i,e)}),10),Zt=o,Vt=r)}else{if(!this.options.bubbleScroll||P(i,!0)===T())return void Kt();te(t,this.options,P(i,!1),!1)}}},l(t,{pluginName:"scroll",initializeByDefault:!0})}),Rt.mount(oe,ne);const re=Rt,ie={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};let ae;const le=new Uint8Array(16);function se(){if(!ae&&(ae="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!ae))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return ae(le)}const ce=[];for(let t=0;t<256;++t)ce.push((t+256).toString(16).slice(1));const de=function(t,e,n){if(ie.randomUUID&&!e&&!t)return ie.randomUUID();const o=(t=t||{}).random||(t.rng||se)();if(o[6]=15&o[6]|64,o[8]=63&o[8]|128,e){n=n||0;for(let t=0;t<16;++t)e[n+t]=o[t];return e}return function(t,e=0){return(ce[t[e+0]]+ce[t[e+1]]+ce[t[e+2]]+ce[t[e+3]]+"-"+ce[t[e+4]]+ce[t[e+5]]+"-"+ce[t[e+6]]+ce[t[e+7]]+"-"+ce[t[e+8]]+ce[t[e+9]]+"-"+ce[t[e+10]]+ce[t[e+11]]+ce[t[e+12]]+ce[t[e+13]]+ce[t[e+14]]+ce[t[e+15]]).toLowerCase()}(o)};class ue{constructor(t,e){this.task=t,this.isDone=e,this.id=de()}}var he=n(379),pe=n.n(he),fe=n(795),me=n.n(fe),ge=n(569),ve=n.n(ge),Ae=n(565),be=n.n(Ae),Ee=n(216),ye=n.n(Ee),we=n(589),Ce=n.n(we),Se=n(426),De={};De.styleTagTransform=Ce(),De.setAttributes=be(),De.insert=ve().bind(null,"head"),De.domAPI=me(),De.insertStyleElement=ye(),pe()(Se.Z,De),Se.Z&&Se.Z.locals&&Se.Z.locals;const xe=new class{constructor(){this.items=[],JSON.parse(localStorage.getItem("ToDoList"))&&JSON.parse(localStorage.getItem("ToDoList")).forEach((t=>{this.items.push({...t})}))}add(t){this.items.push(t),this.store()}edit(t,e){const n=this.items.findIndex((e=>e.id===t.id));this.items[n]=e,this.store()}clear(){this.items=this.items.filter((t=>!t.isDone)),this.store()}reset(t){this.items=[],t.forEach((t=>{this.add(new ue(t.task,!0))})),this.store()}remove(t){this.items=this.items.filter((e=>e.id!==t.id)),this.store()}order(t,e){const n=this.items[t];this.items[t]=this.items[e],this.items[e]=n,this.store()}store(){localStorage.setItem("ToDoList",JSON.stringify(this.items))}},_e="list-group-item d-flex align-items-center border-bottom",Te="list-group-item d-flex align-items-center border-bottom",Be=[{task:" a basic todo list app"},{task:"made with ❤️ by Amanuel"},{task:"——— enjoy 🔥 ———"}],ke=()=>{JSON.parse(localStorage.getItem("ToDoList"))||Be.forEach((t=>{xe.add(new ue(t.task,!0))}));const t=document.getElementById("dashboard");let e,n;t.innerHTML="",xe.items.sort(((t,e)=>t.index-e.index)).forEach((e=>{const n=document.createElement("li");n.className=e.isDone?_e:Te;const o={...e},r=document.createElement("input");r.type="checkbox",r.name="name",r.className="form-check-input",r.style.marginRight="12px",r.checked=e.isDone,r.addEventListener("change",(t=>{n.className=e.isDone?Te:_e,t.target.nextElementSibling.className=e.isDone?"":"cancel",e.isDone=!e.isDone,xe.edit(o,e)}));const i=document.createElement("span");i.setAttribute("contenteditable","true"),i.appendChild(document.createTextNode(e.task)),i.addEventListener("focus",(()=>{n.classList.add("custom-bg")})),i.addEventListener("keypress",(t=>{"Enter"===t.key&&(n.classList.remove("custom-bg"),i.setAttribute("contenteditable","false"),i.setAttribute("contenteditable","true"),e.task=i.innerText,xe.edit(o,e))}));const a=document.createElement("span");a.className="fa fa-trash-o close",a.addEventListener("click",(t=>{t.preventDefault(),xe.remove(e),ke()}));const l=document.createElement("span");l.className="ellipsis-container";const s=document.createElement("i");s.className="fas fa-ellipsis-v",s.addEventListener("click",(t=>{t.preventDefault()})),document.addEventListener("click",(t=>{const{target:e}=t;e!==i&&e!==n&&(n.classList.remove("custom-bg"),s.style="display:block",a.style="display: none")})),n.addEventListener("click",(()=>{n.classList.add("custom-bg"),s.style="display:none",a.style="display: block"})),l.appendChild(s),n.append(r,i,a,l),t.appendChild(n)})),document.getElementById("task").addEventListener("keypress",(t=>{if("Enter"===t.key){const e=document.getElementById("task").value;t.preventDefault(),e.length>0&&(xe.add(new ue(e,!1,0)),document.getElementById("task").value="",ke())}})),document.getElementById("complete").addEventListener("click",(t=>{t.preventDefault(),xe.clear(),ke()})),document.getElementById("refresh").addEventListener("click",(function(){const t=this;this.classList.add("reset"),xe.reset(Be),setTimeout((()=>{t.classList.remove("reset")}),1e3),ke()})),new re(t,{handle:".ellipsis-container",animation:150,onStart(n){const{item:o}=n,r=Array.from(t.children);e=r.indexOf(o)},onEnd(o){const{item:r}=o,i=Array.from(t.children);n=i.indexOf(r),xe.order(e,n)}})};ke()}},t=>{t(t.s=625)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,