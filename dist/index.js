/*! For license information please see index.js.LICENSE.txt */
"use strict";(self.webpackChunkwebpack_demo=self.webpackChunkwebpack_demo||[]).push([[826],{426:(t,e,n)=>{n.d(e,{Z:()=>l});var o=n(537),r=n.n(o),i=n(645),a=n.n(i)()(r());a.push([t.id,"body {\n  background-color: mistyrose;\n}\n\n.elegant-font {\n  font-family: 'Courier New', Courier, monospace;\n}\n\n*:focus {\n  outline: none !important;\n  box-shadow: none !important;\n}\n\n*:checked + span,\n.cancel {\n  text-decoration: line-through;\n}\n\n.custom-bg {\n  background-color: hsl(39, 88%, 87%);\n}\n\n#task {\n  padding: 20px;\n}\n\n#myList {\n  list-style: none;\n  margin: 0;\n}\n\n.container {\n  box-shadow: 2px 2px 2px 2px rgba(0, 0, 0, 0.2);\n}\n\ninput:placeholder-shown {\n  font-style: italic;\n}\n\n.form-control {\n  border: none;\n}\n\n.list-group {\n  margin: 0;\n}\n\n.list-group-item {\n  border: none;\n}\n\n#refresh {\n  cursor: pointer;\n  color: red;\n}\n\n[contenteditable='true']#dash {\n  white-space: nowrap;\n  overflow: hidden;\n  padding: 7px;\n  outline: 0 solid transparent;\n}\n\n.close {\n  display: none;\n  color: red !important;\n  opacity: 1;\n}\n\n.close:hover {\n  opacity: 1;\n}\n\n.ellipsis-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  right: 0;\n  margin-left: auto;\n  cursor: move;\n  width: 60px;\n}\n\n.ellipsis-container:hover .fa-ellipsis-v {\n  color: #222;\n}\n\n.fa-ellipsis-v {\n  color: #777;\n}\n\n.fa-trash-o {\n  cursor: pointer;\n  margin-left: auto;\n}\n\ninput[type='checkbox'] {\n  cursor: pointer;\n}\n\n#complete {\n  text-decoration: none !important;\n}\n\n#complete p {\n  color: #777;\n  font-size: 15px;\n  font-weight: lighter;\n}\n\n#complete p:hover {\n  color: #000;\n  text-decoration: underline;\n}\n\n.spin-animation {\n  transition: 0.9s;\n  transform: rotate(360deg);\n  -webkit-transform: rotate(360deg);\n  -ms-transform: rotate(360deg);\n}\n\n.reset {\n  cursor: pointer;\n  color: red;\n  transition: 0.5s;\n  transform: rotate(360deg);\n  -ms-transform: rotate(360deg);\n  -webkit-transform: rotate(360deg);\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,2BAA2B;AAC7B;;AAEA;EACE,8CAA8C;AAChD;;AAEA;EACE,wBAAwB;EACxB,2BAA2B;AAC7B;;AAEA;;EAEE,6BAA6B;AAC/B;;AAEA;EACE,mCAAmC;AACrC;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,gBAAgB;EAChB,SAAS;AACX;;AAEA;EACE,8CAA8C;AAChD;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,SAAS;AACX;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,eAAe;EACf,UAAU;AACZ;;AAEA;EACE,mBAAmB;EACnB,gBAAgB;EAChB,YAAY;EACZ,4BAA4B;AAC9B;;AAEA;EACE,aAAa;EACb,qBAAqB;EACrB,UAAU;AACZ;;AAEA;EACE,UAAU;AACZ;;AAEA;EACE,aAAa;EACb,uBAAuB;EACvB,mBAAmB;EACnB,kBAAkB;EAClB,MAAM;EACN,SAAS;EACT,QAAQ;EACR,iBAAiB;EACjB,YAAY;EACZ,WAAW;AACb;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,eAAe;EACf,iBAAiB;AACnB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,gCAAgC;AAClC;;AAEA;EACE,WAAW;EACX,eAAe;EACf,oBAAoB;AACtB;;AAEA;EACE,WAAW;EACX,0BAA0B;AAC5B;;AAEA;EACE,gBAAgB;EAChB,yBAAyB;EACzB,iCAAiC;EACjC,6BAA6B;AAC/B;;AAEA;EACE,eAAe;EACf,UAAU;EACV,gBAAgB;EAChB,yBAAyB;EACzB,6BAA6B;EAC7B,iCAAiC;AACnC",sourcesContent:["body {\n  background-color: mistyrose;\n}\n\n.elegant-font {\n  font-family: 'Courier New', Courier, monospace;\n}\n\n*:focus {\n  outline: none !important;\n  box-shadow: none !important;\n}\n\n*:checked + span,\n.cancel {\n  text-decoration: line-through;\n}\n\n.custom-bg {\n  background-color: hsl(39, 88%, 87%);\n}\n\n#task {\n  padding: 20px;\n}\n\n#myList {\n  list-style: none;\n  margin: 0;\n}\n\n.container {\n  box-shadow: 2px 2px 2px 2px rgba(0, 0, 0, 0.2);\n}\n\ninput:placeholder-shown {\n  font-style: italic;\n}\n\n.form-control {\n  border: none;\n}\n\n.list-group {\n  margin: 0;\n}\n\n.list-group-item {\n  border: none;\n}\n\n#refresh {\n  cursor: pointer;\n  color: red;\n}\n\n[contenteditable='true']#dash {\n  white-space: nowrap;\n  overflow: hidden;\n  padding: 7px;\n  outline: 0 solid transparent;\n}\n\n.close {\n  display: none;\n  color: red !important;\n  opacity: 1;\n}\n\n.close:hover {\n  opacity: 1;\n}\n\n.ellipsis-container {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  right: 0;\n  margin-left: auto;\n  cursor: move;\n  width: 60px;\n}\n\n.ellipsis-container:hover .fa-ellipsis-v {\n  color: #222;\n}\n\n.fa-ellipsis-v {\n  color: #777;\n}\n\n.fa-trash-o {\n  cursor: pointer;\n  margin-left: auto;\n}\n\ninput[type='checkbox'] {\n  cursor: pointer;\n}\n\n#complete {\n  text-decoration: none !important;\n}\n\n#complete p {\n  color: #777;\n  font-size: 15px;\n  font-weight: lighter;\n}\n\n#complete p:hover {\n  color: #000;\n  text-decoration: underline;\n}\n\n.spin-animation {\n  transition: 0.9s;\n  transform: rotate(360deg);\n  -webkit-transform: rotate(360deg);\n  -ms-transform: rotate(360deg);\n}\n\n.reset {\n  cursor: pointer;\n  color: red;\n  transition: 0.5s;\n  transform: rotate(360deg);\n  -ms-transform: rotate(360deg);\n  -webkit-transform: rotate(360deg);\n}\n"],sourceRoot:""}]);const l=a},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",o=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),o&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),o&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,o,r,i){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(o)for(var l=0;l<this.length;l++){var s=this[l][0];null!=s&&(a[s]=!0)}for(var c=0;c<t.length;c++){var d=[].concat(t[c]);o&&a[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),r&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=r):d[4]="".concat(r)),e.push(d))}},e}},537:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var o=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),r="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(o),i="/*# ".concat(r," */"),a=n.sources.map((function(t){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(t," */")}));return[e].concat(a).concat([i]).join("\n")}return[e].join("\n")}},379:t=>{var e=[];function n(t){for(var n=-1,o=0;o<e.length;o++)if(e[o].identifier===t){n=o;break}return n}function o(t,o){for(var i={},a=[],l=0;l<t.length;l++){var s=t[l],c=o.base?s[0]+o.base:s[0],d=i[c]||0,u="".concat(c," ").concat(d);i[c]=d+1;var h=n(u),p={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==h)e[h].references++,e[h].updater(p);else{var f=r(p,o);o.byIndex=l,e.splice(l,0,{identifier:u,updater:f,references:1})}a.push(u)}return a}function r(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,r){var i=o(t=t||[],r=r||{});return function(t){t=t||[];for(var a=0;a<i.length;a++){var l=n(i[a]);e[l].references--}for(var s=o(t,r),c=0;c<i.length;c++){var d=n(i[c]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}i=s}}},569:t=>{var e={};t.exports=function(t,n){var o=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var o="";n.supports&&(o+="@supports (".concat(n.supports,") {")),n.media&&(o+="@media ".concat(n.media," {"));var r=void 0!==n.layer;r&&(o+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),o+=n.css,r&&(o+="}"),n.media&&(o+="}"),n.supports&&(o+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(o+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(o,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}},625:(t,e,n)=>{const o={randomUUID:"undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};let r;const i=new Uint8Array(16);function a(){if(!r&&(r="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto),!r))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return r(i)}const l=[];for(let t=0;t<256;++t)l.push((t+256).toString(16).slice(1));const s=function(t,e,n){if(o.randomUUID&&!e&&!t)return o.randomUUID();const r=(t=t||{}).random||(t.rng||a)();if(r[6]=15&r[6]|64,r[8]=63&r[8]|128,e){n=n||0;for(let t=0;t<16;++t)e[n+t]=r[t];return e}return function(t,e=0){return(l[t[e+0]]+l[t[e+1]]+l[t[e+2]]+l[t[e+3]]+"-"+l[t[e+4]]+l[t[e+5]]+"-"+l[t[e+6]]+l[t[e+7]]+"-"+l[t[e+8]]+l[t[e+9]]+"-"+l[t[e+10]]+l[t[e+11]]+l[t[e+12]]+l[t[e+13]]+l[t[e+14]]+l[t[e+15]]).toLowerCase()}(r)};class c{constructor(t,e){this.task=t,this.isDone=e,this.id=s()}}function d(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(t);e&&(o=o.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,o)}return n}function u(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?d(Object(n),!0).forEach((function(e){p(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):d(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function h(t){return h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},h(t)}function p(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function f(){return f=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(t[o]=n[o])}return t},f.apply(this,arguments)}function m(t,e){if(null==t)return{};var n,o,r=function(t,e){if(null==t)return{};var n,o,r={},i=Object.keys(t);for(o=0;o<i.length;o++)n=i[o],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(o=0;o<i.length;o++)n=i[o],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}function g(t){if("undefined"!=typeof window&&window.navigator)return!!navigator.userAgent.match(t)}var v=g(/(?:Trident.*rv[ :]?11\.|msie|iemobile|Windows Phone)/i),A=g(/Edge/i),b=g(/firefox/i),E=g(/safari/i)&&!g(/chrome/i)&&!g(/android/i),y=g(/iP(ad|od|hone)/i),w=g(/chrome/i)&&g(/android/i),C={capture:!1,passive:!1};function S(t,e,n){t.addEventListener(e,n,!v&&C)}function D(t,e,n){t.removeEventListener(e,n,!v&&C)}function x(t,e){if(e){if(">"===e[0]&&(e=e.substring(1)),t)try{if(t.matches)return t.matches(e);if(t.msMatchesSelector)return t.msMatchesSelector(e);if(t.webkitMatchesSelector)return t.webkitMatchesSelector(e)}catch(t){return!1}return!1}}function _(t){return t.host&&t!==document&&t.host.nodeType?t.host:t.parentNode}function T(t,e,n,o){if(t){n=n||document;do{if(null!=e&&(">"===e[0]?t.parentNode===n&&x(t,e):x(t,e))||o&&t===n)return t;if(t===n)break}while(t=_(t))}return null}var B,k=/\s+/g;function N(t,e,n){if(t&&e)if(t.classList)t.classList[n?"add":"remove"](e);else{var o=(" "+t.className+" ").replace(k," ").replace(" "+e+" "," ");t.className=(o+(n?" "+e:"")).replace(k," ")}}function I(t,e,n){var o=t&&t.style;if(o){if(void 0===n)return document.defaultView&&document.defaultView.getComputedStyle?n=document.defaultView.getComputedStyle(t,""):t.currentStyle&&(n=t.currentStyle),void 0===e?n:n[e];e in o||-1!==e.indexOf("webkit")||(e="-webkit-"+e),o[e]=n+("string"==typeof n?"":"px")}}function O(t,e){var n="";if("string"==typeof t)n=t;else do{var o=I(t,"transform");o&&"none"!==o&&(n=o+" "+n)}while(!e&&(t=t.parentNode));var r=window.DOMMatrix||window.WebKitCSSMatrix||window.CSSMatrix||window.MSCSSMatrix;return r&&new r(n)}function M(t,e,n){if(t){var o=t.getElementsByTagName(e),r=0,i=o.length;if(n)for(;r<i;r++)n(o[r],r);return o}return[]}function P(){return document.scrollingElement||document.documentElement}function L(t,e,n,o,r){if(t.getBoundingClientRect||t===window){var i,a,l,s,c,d,u;if(t!==window&&t.parentNode&&t!==P()?(a=(i=t.getBoundingClientRect()).top,l=i.left,s=i.bottom,c=i.right,d=i.height,u=i.width):(a=0,l=0,s=window.innerHeight,c=window.innerWidth,d=window.innerHeight,u=window.innerWidth),(e||n)&&t!==window&&(r=r||t.parentNode,!v))do{if(r&&r.getBoundingClientRect&&("none"!==I(r,"transform")||n&&"static"!==I(r,"position"))){var h=r.getBoundingClientRect();a-=h.top+parseInt(I(r,"border-top-width")),l-=h.left+parseInt(I(r,"border-left-width")),s=a+i.height,c=l+i.width;break}}while(r=r.parentNode);if(o&&t!==window){var p=O(r||t),f=p&&p.a,m=p&&p.d;p&&(s=(a/=m)+(d/=m),c=(l/=f)+(u/=f))}return{top:a,left:l,bottom:s,right:c,width:u,height:d}}}function R(t,e,n){for(var o=U(t,!0),r=L(t)[e];o;){var i=L(o)[n];if(!("top"===n||"left"===n?r>=i:r<=i))return o;if(o===P())break;o=U(o,!1)}return!1}function Y(t,e,n,o){for(var r=0,i=0,a=t.children;i<a.length;){if("none"!==a[i].style.display&&a[i]!==Ht.ghost&&(o||a[i]!==Ht.dragged)&&T(a[i],n.draggable,t,!1)){if(r===e)return a[i];r++}i++}return null}function X(t,e){for(var n=t.lastElementChild;n&&(n===Ht.ghost||"none"===I(n,"display")||e&&!x(n,e));)n=n.previousElementSibling;return n||null}function j(t,e){var n=0;if(!t||!t.parentNode)return-1;for(;t=t.previousElementSibling;)"TEMPLATE"===t.nodeName.toUpperCase()||t===Ht.clone||e&&!x(t,e)||n++;return n}function F(t){var e=0,n=0,o=P();if(t)do{var r=O(t),i=r.a,a=r.d;e+=t.scrollLeft*i,n+=t.scrollTop*a}while(t!==o&&(t=t.parentNode));return[e,n]}function U(t,e){if(!t||!t.getBoundingClientRect)return P();var n=t,o=!1;do{if(n.clientWidth<n.scrollWidth||n.clientHeight<n.scrollHeight){var r=I(n);if(n.clientWidth<n.scrollWidth&&("auto"==r.overflowX||"scroll"==r.overflowX)||n.clientHeight<n.scrollHeight&&("auto"==r.overflowY||"scroll"==r.overflowY)){if(!n.getBoundingClientRect||n===document.body)return P();if(o||e)return n;o=!0}}}while(n=n.parentNode);return P()}function W(t,e){return Math.round(t.top)===Math.round(e.top)&&Math.round(t.left)===Math.round(e.left)&&Math.round(t.height)===Math.round(e.height)&&Math.round(t.width)===Math.round(e.width)}function H(t,e){return function(){if(!B){var n=arguments,o=this;1===n.length?t.call(o,n[0]):t.apply(o,n),B=setTimeout((function(){B=void 0}),e)}}}function z(t,e,n){t.scrollLeft+=e,t.scrollTop+=n}function Z(t){var e=window.Polymer,n=window.jQuery||window.Zepto;return e&&e.dom?e.dom(t).cloneNode(!0):n?n(t).clone(!0)[0]:t.cloneNode(!0)}var V="Sortable"+(new Date).getTime();var G=[],q={initializeByDefault:!0},J={mount:function(t){for(var e in q)q.hasOwnProperty(e)&&!(e in t)&&(t[e]=q[e]);G.forEach((function(e){if(e.pluginName===t.pluginName)throw"Sortable: Cannot mount plugin ".concat(t.pluginName," more than once")})),G.push(t)},pluginEvent:function(t,e,n){var o=this;this.eventCanceled=!1,n.cancel=function(){o.eventCanceled=!0};var r=t+"Global";G.forEach((function(o){e[o.pluginName]&&(e[o.pluginName][r]&&e[o.pluginName][r](u({sortable:e},n)),e.options[o.pluginName]&&e[o.pluginName][t]&&e[o.pluginName][t](u({sortable:e},n)))}))},initializePlugins:function(t,e,n,o){for(var r in G.forEach((function(o){var r=o.pluginName;if(t.options[r]||o.initializeByDefault){var i=new o(t,e,t.options);i.sortable=t,i.options=t.options,t[r]=i,f(n,i.defaults)}})),t.options)if(t.options.hasOwnProperty(r)){var i=this.modifyOption(t,r,t.options[r]);void 0!==i&&(t.options[r]=i)}},getEventProperties:function(t,e){var n={};return G.forEach((function(o){"function"==typeof o.eventProperties&&f(n,o.eventProperties.call(e[o.pluginName],t))})),n},modifyOption:function(t,e,n){var o;return G.forEach((function(r){t[r.pluginName]&&r.optionListeners&&"function"==typeof r.optionListeners[e]&&(o=r.optionListeners[e].call(t[r.pluginName],n))})),o}};var Q=["evt"],K=function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=n.evt,r=m(n,Q);J.pluginEvent.bind(Ht)(t,e,u({dragEl:tt,parentEl:et,ghostEl:nt,rootEl:ot,nextEl:rt,lastDownEl:it,cloneEl:at,cloneHidden:lt,dragStarted:Et,putSortable:pt,activeSortable:Ht.active,originalEvent:o,oldIndex:st,oldDraggableIndex:dt,newIndex:ct,newDraggableIndex:ut,hideGhostForTarget:jt,unhideGhostForTarget:Ft,cloneNowHidden:function(){lt=!0},cloneNowShown:function(){lt=!1},dispatchSortableEvent:function(t){$({sortable:e,name:t,originalEvent:o})}},r))};function $(t){!function(t){var e=t.sortable,n=t.rootEl,o=t.name,r=t.targetEl,i=t.cloneEl,a=t.toEl,l=t.fromEl,s=t.oldIndex,c=t.newIndex,d=t.oldDraggableIndex,h=t.newDraggableIndex,p=t.originalEvent,f=t.putSortable,m=t.extraEventProperties;if(e=e||n&&n[V]){var g,b=e.options,E="on"+o.charAt(0).toUpperCase()+o.substr(1);!window.CustomEvent||v||A?(g=document.createEvent("Event")).initEvent(o,!0,!0):g=new CustomEvent(o,{bubbles:!0,cancelable:!0}),g.to=a||n,g.from=l||n,g.item=r||n,g.clone=i,g.oldIndex=s,g.newIndex=c,g.oldDraggableIndex=d,g.newDraggableIndex=h,g.originalEvent=p,g.pullMode=f?f.lastPutMode:void 0;var y=u(u({},m),J.getEventProperties(o,e));for(var w in y)g[w]=y[w];n&&n.dispatchEvent(g),b[E]&&b[E].call(e,g)}}(u({putSortable:pt,cloneEl:at,targetEl:tt,rootEl:ot,oldIndex:st,oldDraggableIndex:dt,newIndex:ct,newDraggableIndex:ut},t))}var tt,et,nt,ot,rt,it,at,lt,st,ct,dt,ut,ht,pt,ft,mt,gt,vt,At,bt,Et,yt,wt,Ct,St,Dt=!1,xt=!1,_t=[],Tt=!1,Bt=!1,kt=[],Nt=!1,It=[],Ot="undefined"!=typeof document,Mt=y,Pt=A||v?"cssFloat":"float",Lt=Ot&&!w&&!y&&"draggable"in document.createElement("div"),Rt=function(){if(Ot){if(v)return!1;var t=document.createElement("x");return t.style.cssText="pointer-events:auto","auto"===t.style.pointerEvents}}(),Yt=function(t,e){var n=I(t),o=parseInt(n.width)-parseInt(n.paddingLeft)-parseInt(n.paddingRight)-parseInt(n.borderLeftWidth)-parseInt(n.borderRightWidth),r=Y(t,0,e),i=Y(t,1,e),a=r&&I(r),l=i&&I(i),s=a&&parseInt(a.marginLeft)+parseInt(a.marginRight)+L(r).width,c=l&&parseInt(l.marginLeft)+parseInt(l.marginRight)+L(i).width;if("flex"===n.display)return"column"===n.flexDirection||"column-reverse"===n.flexDirection?"vertical":"horizontal";if("grid"===n.display)return n.gridTemplateColumns.split(" ").length<=1?"vertical":"horizontal";if(r&&a.float&&"none"!==a.float){var d="left"===a.float?"left":"right";return!i||"both"!==l.clear&&l.clear!==d?"horizontal":"vertical"}return r&&("block"===a.display||"flex"===a.display||"table"===a.display||"grid"===a.display||s>=o&&"none"===n[Pt]||i&&"none"===n[Pt]&&s+c>o)?"vertical":"horizontal"},Xt=function(t){function e(t,n){return function(o,r,i,a){var l=o.options.group.name&&r.options.group.name&&o.options.group.name===r.options.group.name;if(null==t&&(n||l))return!0;if(null==t||!1===t)return!1;if(n&&"clone"===t)return t;if("function"==typeof t)return e(t(o,r,i,a),n)(o,r,i,a);var s=(n?o:r).options.group.name;return!0===t||"string"==typeof t&&t===s||t.join&&t.indexOf(s)>-1}}var n={},o=t.group;o&&"object"==h(o)||(o={name:o}),n.name=o.name,n.checkPull=e(o.pull,!0),n.checkPut=e(o.put),n.revertClone=o.revertClone,t.group=n},jt=function(){!Rt&&nt&&I(nt,"display","none")},Ft=function(){!Rt&&nt&&I(nt,"display","")};Ot&&!w&&document.addEventListener("click",(function(t){if(xt)return t.preventDefault(),t.stopPropagation&&t.stopPropagation(),t.stopImmediatePropagation&&t.stopImmediatePropagation(),xt=!1,!1}),!0);var Ut=function(t){if(tt){t=t.touches?t.touches[0]:t;var e=(r=t.clientX,i=t.clientY,_t.some((function(t){var e=t[V].options.emptyInsertThreshold;if(e&&!X(t)){var n=L(t),o=r>=n.left-e&&r<=n.right+e,l=i>=n.top-e&&i<=n.bottom+e;return o&&l?a=t:void 0}})),a);if(e){var n={};for(var o in t)t.hasOwnProperty(o)&&(n[o]=t[o]);n.target=n.rootEl=e,n.preventDefault=void 0,n.stopPropagation=void 0,e[V]._onDragOver(n)}}var r,i,a},Wt=function(t){tt&&tt.parentNode[V]._isOutsideThisEl(t.target)};function Ht(t,e){if(!t||!t.nodeType||1!==t.nodeType)throw"Sortable: `el` must be an HTMLElement, not ".concat({}.toString.call(t));this.el=t,this.options=e=f({},e),t[V]=this;var n,o,r={group:null,sort:!0,disabled:!1,store:null,handle:null,draggable:/^[uo]l$/i.test(t.nodeName)?">li":">*",swapThreshold:1,invertSwap:!1,invertedSwapThreshold:null,removeCloneOnHide:!0,direction:function(){return Yt(t,this.options)},ghostClass:"sortable-ghost",chosenClass:"sortable-chosen",dragClass:"sortable-drag",ignore:"a, img",filter:null,preventOnFilter:!0,animation:0,easing:null,setData:function(t,e){t.setData("Text",e.textContent)},dropBubble:!1,dragoverBubble:!1,dataIdAttr:"data-id",delay:0,delayOnTouchOnly:!1,touchStartThreshold:(Number.parseInt?Number:window).parseInt(window.devicePixelRatio,10)||1,forceFallback:!1,fallbackClass:"sortable-fallback",fallbackOnBody:!1,fallbackTolerance:0,fallbackOffset:{x:0,y:0},supportPointer:!1!==Ht.supportPointer&&"PointerEvent"in window&&!E,emptyInsertThreshold:5};for(var i in J.initializePlugins(this,t,r),r)!(i in e)&&(e[i]=r[i]);for(var a in Xt(e),this)"_"===a.charAt(0)&&"function"==typeof this[a]&&(this[a]=this[a].bind(this));this.nativeDraggable=!e.forceFallback&&Lt,this.nativeDraggable&&(this.options.touchStartThreshold=1),e.supportPointer?S(t,"pointerdown",this._onTapStart):(S(t,"mousedown",this._onTapStart),S(t,"touchstart",this._onTapStart)),this.nativeDraggable&&(S(t,"dragover",this),S(t,"dragenter",this)),_t.push(this.el),e.store&&e.store.get&&this.sort(e.store.get(this)||[]),f(this,(o=[],{captureAnimationState:function(){o=[],this.options.animation&&[].slice.call(this.el.children).forEach((function(t){if("none"!==I(t,"display")&&t!==Ht.ghost){o.push({target:t,rect:L(t)});var e=u({},o[o.length-1].rect);if(t.thisAnimationDuration){var n=O(t,!0);n&&(e.top-=n.f,e.left-=n.e)}t.fromRect=e}}))},addAnimationState:function(t){o.push(t)},removeAnimationState:function(t){o.splice(function(t,e){for(var n in t)if(t.hasOwnProperty(n))for(var o in e)if(e.hasOwnProperty(o)&&e[o]===t[n][o])return Number(n);return-1}(o,{target:t}),1)},animateAll:function(t){var e=this;if(!this.options.animation)return clearTimeout(n),void("function"==typeof t&&t());var r=!1,i=0;o.forEach((function(t){var n=0,o=t.target,a=o.fromRect,l=L(o),s=o.prevFromRect,c=o.prevToRect,d=t.rect,u=O(o,!0);u&&(l.top-=u.f,l.left-=u.e),o.toRect=l,o.thisAnimationDuration&&W(s,l)&&!W(a,l)&&(d.top-l.top)/(d.left-l.left)==(a.top-l.top)/(a.left-l.left)&&(n=function(t,e,n,o){return Math.sqrt(Math.pow(e.top-t.top,2)+Math.pow(e.left-t.left,2))/Math.sqrt(Math.pow(e.top-n.top,2)+Math.pow(e.left-n.left,2))*o.animation}(d,s,c,e.options)),W(l,a)||(o.prevFromRect=a,o.prevToRect=l,n||(n=e.options.animation),e.animate(o,d,l,n)),n&&(r=!0,i=Math.max(i,n),clearTimeout(o.animationResetTimer),o.animationResetTimer=setTimeout((function(){o.animationTime=0,o.prevFromRect=null,o.fromRect=null,o.prevToRect=null,o.thisAnimationDuration=null}),n),o.thisAnimationDuration=n)})),clearTimeout(n),r?n=setTimeout((function(){"function"==typeof t&&t()}),i):"function"==typeof t&&t(),o=[]},animate:function(t,e,n,o){if(o){I(t,"transition",""),I(t,"transform","");var r=O(this.el),i=r&&r.a,a=r&&r.d,l=(e.left-n.left)/(i||1),s=(e.top-n.top)/(a||1);t.animatingX=!!l,t.animatingY=!!s,I(t,"transform","translate3d("+l+"px,"+s+"px,0)"),this.forRepaintDummy=function(t){return t.offsetWidth}(t),I(t,"transition","transform "+o+"ms"+(this.options.easing?" "+this.options.easing:"")),I(t,"transform","translate3d(0,0,0)"),"number"==typeof t.animated&&clearTimeout(t.animated),t.animated=setTimeout((function(){I(t,"transition",""),I(t,"transform",""),t.animated=!1,t.animatingX=!1,t.animatingY=!1}),o)}}}))}function zt(t,e,n,o,r,i,a,l){var s,c,d=t[V],u=d.options.onMove;return!window.CustomEvent||v||A?(s=document.createEvent("Event")).initEvent("move",!0,!0):s=new CustomEvent("move",{bubbles:!0,cancelable:!0}),s.to=e,s.from=t,s.dragged=n,s.draggedRect=o,s.related=r||e,s.relatedRect=i||L(e),s.willInsertAfter=l,s.originalEvent=a,t.dispatchEvent(s),u&&(c=u.call(d,s,a)),c}function Zt(t){t.draggable=!1}function Vt(){Nt=!1}function Gt(t){for(var e=t.tagName+t.className+t.src+t.href+t.textContent,n=e.length,o=0;n--;)o+=e.charCodeAt(n);return o.toString(36)}function qt(t){return setTimeout(t,0)}function Jt(t){return clearTimeout(t)}Ht.prototype={constructor:Ht,_isOutsideThisEl:function(t){this.el.contains(t)||t===this.el||(yt=null)},_getDirection:function(t,e){return"function"==typeof this.options.direction?this.options.direction.call(this,t,e,tt):this.options.direction},_onTapStart:function(t){if(t.cancelable){var e=this,n=this.el,o=this.options,r=o.preventOnFilter,i=t.type,a=t.touches&&t.touches[0]||t.pointerType&&"touch"===t.pointerType&&t,l=(a||t).target,s=t.target.shadowRoot&&(t.path&&t.path[0]||t.composedPath&&t.composedPath()[0])||l,c=o.filter;if(function(t){It.length=0;for(var e=t.getElementsByTagName("input"),n=e.length;n--;){var o=e[n];o.checked&&It.push(o)}}(n),!tt&&!(/mousedown|pointerdown/.test(i)&&0!==t.button||o.disabled)&&!s.isContentEditable&&(this.nativeDraggable||!E||!l||"SELECT"!==l.tagName.toUpperCase())&&!((l=T(l,o.draggable,n,!1))&&l.animated||it===l)){if(st=j(l),dt=j(l,o.draggable),"function"==typeof c){if(c.call(this,t,l,this))return $({sortable:e,rootEl:s,name:"filter",targetEl:l,toEl:n,fromEl:n}),K("filter",e,{evt:t}),void(r&&t.cancelable&&t.preventDefault())}else if(c&&(c=c.split(",").some((function(o){if(o=T(s,o.trim(),n,!1))return $({sortable:e,rootEl:o,name:"filter",targetEl:l,fromEl:n,toEl:n}),K("filter",e,{evt:t}),!0}))))return void(r&&t.cancelable&&t.preventDefault());o.handle&&!T(s,o.handle,n,!1)||this._prepareDragStart(t,a,l)}}},_prepareDragStart:function(t,e,n){var o,r=this,i=r.el,a=r.options,l=i.ownerDocument;if(n&&!tt&&n.parentNode===i){var s=L(n);if(ot=i,et=(tt=n).parentNode,rt=tt.nextSibling,it=n,ht=a.group,Ht.dragged=tt,ft={target:tt,clientX:(e||t).clientX,clientY:(e||t).clientY},At=ft.clientX-s.left,bt=ft.clientY-s.top,this._lastX=(e||t).clientX,this._lastY=(e||t).clientY,tt.style["will-change"]="all",o=function(){K("delayEnded",r,{evt:t}),Ht.eventCanceled?r._onDrop():(r._disableDelayedDragEvents(),!b&&r.nativeDraggable&&(tt.draggable=!0),r._triggerDragStart(t,e),$({sortable:r,name:"choose",originalEvent:t}),N(tt,a.chosenClass,!0))},a.ignore.split(",").forEach((function(t){M(tt,t.trim(),Zt)})),S(l,"dragover",Ut),S(l,"mousemove",Ut),S(l,"touchmove",Ut),S(l,"mouseup",r._onDrop),S(l,"touchend",r._onDrop),S(l,"touchcancel",r._onDrop),b&&this.nativeDraggable&&(this.options.touchStartThreshold=4,tt.draggable=!0),K("delayStart",this,{evt:t}),!a.delay||a.delayOnTouchOnly&&!e||this.nativeDraggable&&(A||v))o();else{if(Ht.eventCanceled)return void this._onDrop();S(l,"mouseup",r._disableDelayedDrag),S(l,"touchend",r._disableDelayedDrag),S(l,"touchcancel",r._disableDelayedDrag),S(l,"mousemove",r._delayedDragTouchMoveHandler),S(l,"touchmove",r._delayedDragTouchMoveHandler),a.supportPointer&&S(l,"pointermove",r._delayedDragTouchMoveHandler),r._dragStartTimer=setTimeout(o,a.delay)}}},_delayedDragTouchMoveHandler:function(t){var e=t.touches?t.touches[0]:t;Math.max(Math.abs(e.clientX-this._lastX),Math.abs(e.clientY-this._lastY))>=Math.floor(this.options.touchStartThreshold/(this.nativeDraggable&&window.devicePixelRatio||1))&&this._disableDelayedDrag()},_disableDelayedDrag:function(){tt&&Zt(tt),clearTimeout(this._dragStartTimer),this._disableDelayedDragEvents()},_disableDelayedDragEvents:function(){var t=this.el.ownerDocument;D(t,"mouseup",this._disableDelayedDrag),D(t,"touchend",this._disableDelayedDrag),D(t,"touchcancel",this._disableDelayedDrag),D(t,"mousemove",this._delayedDragTouchMoveHandler),D(t,"touchmove",this._delayedDragTouchMoveHandler),D(t,"pointermove",this._delayedDragTouchMoveHandler)},_triggerDragStart:function(t,e){e=e||"touch"==t.pointerType&&t,!this.nativeDraggable||e?this.options.supportPointer?S(document,"pointermove",this._onTouchMove):S(document,e?"touchmove":"mousemove",this._onTouchMove):(S(tt,"dragend",this),S(ot,"dragstart",this._onDragStart));try{document.selection?qt((function(){document.selection.empty()})):window.getSelection().removeAllRanges()}catch(t){}},_dragStarted:function(t,e){if(Dt=!1,ot&&tt){K("dragStarted",this,{evt:e}),this.nativeDraggable&&S(document,"dragover",Wt);var n=this.options;!t&&N(tt,n.dragClass,!1),N(tt,n.ghostClass,!0),Ht.active=this,t&&this._appendGhost(),$({sortable:this,name:"start",originalEvent:e})}else this._nulling()},_emulateDragOver:function(){if(mt){this._lastX=mt.clientX,this._lastY=mt.clientY,jt();for(var t=document.elementFromPoint(mt.clientX,mt.clientY),e=t;t&&t.shadowRoot&&(t=t.shadowRoot.elementFromPoint(mt.clientX,mt.clientY))!==e;)e=t;if(tt.parentNode[V]._isOutsideThisEl(t),e)do{if(e[V]&&e[V]._onDragOver({clientX:mt.clientX,clientY:mt.clientY,target:t,rootEl:e})&&!this.options.dragoverBubble)break;t=e}while(e=e.parentNode);Ft()}},_onTouchMove:function(t){if(ft){var e=this.options,n=e.fallbackTolerance,o=e.fallbackOffset,r=t.touches?t.touches[0]:t,i=nt&&O(nt,!0),a=nt&&i&&i.a,l=nt&&i&&i.d,s=Mt&&St&&F(St),c=(r.clientX-ft.clientX+o.x)/(a||1)+(s?s[0]-kt[0]:0)/(a||1),d=(r.clientY-ft.clientY+o.y)/(l||1)+(s?s[1]-kt[1]:0)/(l||1);if(!Ht.active&&!Dt){if(n&&Math.max(Math.abs(r.clientX-this._lastX),Math.abs(r.clientY-this._lastY))<n)return;this._onDragStart(t,!0)}if(nt){i?(i.e+=c-(gt||0),i.f+=d-(vt||0)):i={a:1,b:0,c:0,d:1,e:c,f:d};var u="matrix(".concat(i.a,",").concat(i.b,",").concat(i.c,",").concat(i.d,",").concat(i.e,",").concat(i.f,")");I(nt,"webkitTransform",u),I(nt,"mozTransform",u),I(nt,"msTransform",u),I(nt,"transform",u),gt=c,vt=d,mt=r}t.cancelable&&t.preventDefault()}},_appendGhost:function(){if(!nt){var t=this.options.fallbackOnBody?document.body:ot,e=L(tt,!0,Mt,!0,t),n=this.options;if(Mt){for(St=t;"static"===I(St,"position")&&"none"===I(St,"transform")&&St!==document;)St=St.parentNode;St!==document.body&&St!==document.documentElement?(St===document&&(St=P()),e.top+=St.scrollTop,e.left+=St.scrollLeft):St=P(),kt=F(St)}N(nt=tt.cloneNode(!0),n.ghostClass,!1),N(nt,n.fallbackClass,!0),N(nt,n.dragClass,!0),I(nt,"transition",""),I(nt,"transform",""),I(nt,"box-sizing","border-box"),I(nt,"margin",0),I(nt,"top",e.top),I(nt,"left",e.left),I(nt,"width",e.width),I(nt,"height",e.height),I(nt,"opacity","0.8"),I(nt,"position",Mt?"absolute":"fixed"),I(nt,"zIndex","100000"),I(nt,"pointerEvents","none"),Ht.ghost=nt,t.appendChild(nt),I(nt,"transform-origin",At/parseInt(nt.style.width)*100+"% "+bt/parseInt(nt.style.height)*100+"%")}},_onDragStart:function(t,e){var n=this,o=t.dataTransfer,r=n.options;K("dragStart",this,{evt:t}),Ht.eventCanceled?this._onDrop():(K("setupClone",this),Ht.eventCanceled||((at=Z(tt)).removeAttribute("id"),at.draggable=!1,at.style["will-change"]="",this._hideClone(),N(at,this.options.chosenClass,!1),Ht.clone=at),n.cloneId=qt((function(){K("clone",n),Ht.eventCanceled||(n.options.removeCloneOnHide||ot.insertBefore(at,tt),n._hideClone(),$({sortable:n,name:"clone"}))})),!e&&N(tt,r.dragClass,!0),e?(xt=!0,n._loopId=setInterval(n._emulateDragOver,50)):(D(document,"mouseup",n._onDrop),D(document,"touchend",n._onDrop),D(document,"touchcancel",n._onDrop),o&&(o.effectAllowed="move",r.setData&&r.setData.call(n,o,tt)),S(document,"drop",n),I(tt,"transform","translateZ(0)")),Dt=!0,n._dragStartId=qt(n._dragStarted.bind(n,e,t)),S(document,"selectstart",n),Et=!0,E&&I(document.body,"user-select","none"))},_onDragOver:function(t){var e,n,o,r,i=this.el,a=t.target,l=this.options,s=l.group,c=Ht.active,d=ht===s,h=l.sort,p=pt||c,f=this,m=!1;if(!Nt){if(void 0!==t.preventDefault&&t.cancelable&&t.preventDefault(),a=T(a,l.draggable,i,!0),O("dragOver"),Ht.eventCanceled)return m;if(tt.contains(t.target)||a.animated&&a.animatingX&&a.animatingY||f._ignoreWhileAnimating===a)return P(!1);if(xt=!1,c&&!l.disabled&&(d?h||(o=et!==ot):pt===this||(this.lastPutMode=ht.checkPull(this,c,tt,t))&&s.checkPut(this,c,tt,t))){if(r="vertical"===this._getDirection(t,a),e=L(tt),O("dragOverValid"),Ht.eventCanceled)return m;if(o)return et=ot,M(),this._hideClone(),O("revert"),Ht.eventCanceled||(rt?ot.insertBefore(tt,rt):ot.appendChild(tt)),P(!0);var g=X(i,l.draggable);if(!g||function(t,e,n){var o=L(X(n.el,n.options.draggable));return e?t.clientX>o.right+10||t.clientX<=o.right&&t.clientY>o.bottom&&t.clientX>=o.left:t.clientX>o.right&&t.clientY>o.top||t.clientX<=o.right&&t.clientY>o.bottom+10}(t,r,this)&&!g.animated){if(g===tt)return P(!1);if(g&&i===t.target&&(a=g),a&&(n=L(a)),!1!==zt(ot,i,tt,e,a,n,t,!!a))return M(),g&&g.nextSibling?i.insertBefore(tt,g.nextSibling):i.appendChild(tt),et=i,F(),P(!0)}else if(g&&function(t,e,n){var o=L(Y(n.el,0,n.options,!0));return e?t.clientX<o.left-10||t.clientY<o.top&&t.clientX<o.right:t.clientY<o.top-10||t.clientY<o.bottom&&t.clientX<o.left}(t,r,this)){var v=Y(i,0,l,!0);if(v===tt)return P(!1);if(n=L(a=v),!1!==zt(ot,i,tt,e,a,n,t,!1))return M(),i.insertBefore(tt,v),et=i,F(),P(!0)}else if(a.parentNode===i){n=L(a);var A,b,E,y=tt.parentNode!==i,w=!function(t,e,n){var o=n?t.left:t.top,r=n?t.right:t.bottom,i=n?t.width:t.height,a=n?e.left:e.top,l=n?e.right:e.bottom,s=n?e.width:e.height;return o===a||r===l||o+i/2===a+s/2}(tt.animated&&tt.toRect||e,a.animated&&a.toRect||n,r),C=r?"top":"left",S=R(a,"top","top")||R(tt,"top","top"),D=S?S.scrollTop:void 0;if(yt!==a&&(b=n[C],Tt=!1,Bt=!w&&l.invertSwap||y),A=function(t,e,n,o,r,i,a,l){var s=o?t.clientY:t.clientX,c=o?n.height:n.width,d=o?n.top:n.left,u=o?n.bottom:n.right,h=!1;if(!a)if(l&&Ct<c*r){if(!Tt&&(1===wt?s>d+c*i/2:s<u-c*i/2)&&(Tt=!0),Tt)h=!0;else if(1===wt?s<d+Ct:s>u-Ct)return-wt}else if(s>d+c*(1-r)/2&&s<u-c*(1-r)/2)return function(t){return j(tt)<j(t)?1:-1}(e);return(h=h||a)&&(s<d+c*i/2||s>u-c*i/2)?s>d+c/2?1:-1:0}(t,a,n,r,w?1:l.swapThreshold,null==l.invertedSwapThreshold?l.swapThreshold:l.invertedSwapThreshold,Bt,yt===a),0!==A){var x=j(tt);do{x-=A,E=et.children[x]}while(E&&("none"===I(E,"display")||E===nt))}if(0===A||E===a)return P(!1);yt=a,wt=A;var _=a.nextElementSibling,B=!1,k=zt(ot,i,tt,e,a,n,t,B=1===A);if(!1!==k)return 1!==k&&-1!==k||(B=1===k),Nt=!0,setTimeout(Vt,30),M(),B&&!_?i.appendChild(tt):a.parentNode.insertBefore(tt,B?_:a),S&&z(S,0,D-S.scrollTop),et=tt.parentNode,void 0===b||Bt||(Ct=Math.abs(b-L(a)[C])),F(),P(!0)}if(i.contains(tt))return P(!1)}return!1}function O(l,s){K(l,f,u({evt:t,isOwner:d,axis:r?"vertical":"horizontal",revert:o,dragRect:e,targetRect:n,canSort:h,fromSortable:p,target:a,completed:P,onMove:function(n,o){return zt(ot,i,tt,e,n,L(n),t,o)},changed:F},s))}function M(){O("dragOverAnimationCapture"),f.captureAnimationState(),f!==p&&p.captureAnimationState()}function P(e){return O("dragOverCompleted",{insertion:e}),e&&(d?c._hideClone():c._showClone(f),f!==p&&(N(tt,pt?pt.options.ghostClass:c.options.ghostClass,!1),N(tt,l.ghostClass,!0)),pt!==f&&f!==Ht.active?pt=f:f===Ht.active&&pt&&(pt=null),p===f&&(f._ignoreWhileAnimating=a),f.animateAll((function(){O("dragOverAnimationComplete"),f._ignoreWhileAnimating=null})),f!==p&&(p.animateAll(),p._ignoreWhileAnimating=null)),(a===tt&&!tt.animated||a===i&&!a.animated)&&(yt=null),l.dragoverBubble||t.rootEl||a===document||(tt.parentNode[V]._isOutsideThisEl(t.target),!e&&Ut(t)),!l.dragoverBubble&&t.stopPropagation&&t.stopPropagation(),m=!0}function F(){ct=j(tt),ut=j(tt,l.draggable),$({sortable:f,name:"change",toEl:i,newIndex:ct,newDraggableIndex:ut,originalEvent:t})}},_ignoreWhileAnimating:null,_offMoveEvents:function(){D(document,"mousemove",this._onTouchMove),D(document,"touchmove",this._onTouchMove),D(document,"pointermove",this._onTouchMove),D(document,"dragover",Ut),D(document,"mousemove",Ut),D(document,"touchmove",Ut)},_offUpEvents:function(){var t=this.el.ownerDocument;D(t,"mouseup",this._onDrop),D(t,"touchend",this._onDrop),D(t,"pointerup",this._onDrop),D(t,"touchcancel",this._onDrop),D(document,"selectstart",this)},_onDrop:function(t){var e=this.el,n=this.options;ct=j(tt),ut=j(tt,n.draggable),K("drop",this,{evt:t}),et=tt&&tt.parentNode,ct=j(tt),ut=j(tt,n.draggable),Ht.eventCanceled||(Dt=!1,Bt=!1,Tt=!1,clearInterval(this._loopId),clearTimeout(this._dragStartTimer),Jt(this.cloneId),Jt(this._dragStartId),this.nativeDraggable&&(D(document,"drop",this),D(e,"dragstart",this._onDragStart)),this._offMoveEvents(),this._offUpEvents(),E&&I(document.body,"user-select",""),I(tt,"transform",""),t&&(Et&&(t.cancelable&&t.preventDefault(),!n.dropBubble&&t.stopPropagation()),nt&&nt.parentNode&&nt.parentNode.removeChild(nt),(ot===et||pt&&"clone"!==pt.lastPutMode)&&at&&at.parentNode&&at.parentNode.removeChild(at),tt&&(this.nativeDraggable&&D(tt,"dragend",this),Zt(tt),tt.style["will-change"]="",Et&&!Dt&&N(tt,pt?pt.options.ghostClass:this.options.ghostClass,!1),N(tt,this.options.chosenClass,!1),$({sortable:this,name:"unchoose",toEl:et,newIndex:null,newDraggableIndex:null,originalEvent:t}),ot!==et?(ct>=0&&($({rootEl:et,name:"add",toEl:et,fromEl:ot,originalEvent:t}),$({sortable:this,name:"remove",toEl:et,originalEvent:t}),$({rootEl:et,name:"sort",toEl:et,fromEl:ot,originalEvent:t}),$({sortable:this,name:"sort",toEl:et,originalEvent:t})),pt&&pt.save()):ct!==st&&ct>=0&&($({sortable:this,name:"update",toEl:et,originalEvent:t}),$({sortable:this,name:"sort",toEl:et,originalEvent:t})),Ht.active&&(null!=ct&&-1!==ct||(ct=st,ut=dt),$({sortable:this,name:"end",toEl:et,originalEvent:t}),this.save())))),this._nulling()},_nulling:function(){K("nulling",this),ot=tt=et=nt=rt=at=it=lt=ft=mt=Et=ct=ut=st=dt=yt=wt=pt=ht=Ht.dragged=Ht.ghost=Ht.clone=Ht.active=null,It.forEach((function(t){t.checked=!0})),It.length=gt=vt=0},handleEvent:function(t){switch(t.type){case"drop":case"dragend":this._onDrop(t);break;case"dragenter":case"dragover":tt&&(this._onDragOver(t),function(t){t.dataTransfer&&(t.dataTransfer.dropEffect="move"),t.cancelable&&t.preventDefault()}(t));break;case"selectstart":t.preventDefault()}},toArray:function(){for(var t,e=[],n=this.el.children,o=0,r=n.length,i=this.options;o<r;o++)T(t=n[o],i.draggable,this.el,!1)&&e.push(t.getAttribute(i.dataIdAttr)||Gt(t));return e},sort:function(t,e){var n={},o=this.el;this.toArray().forEach((function(t,e){var r=o.children[e];T(r,this.options.draggable,o,!1)&&(n[t]=r)}),this),e&&this.captureAnimationState(),t.forEach((function(t){n[t]&&(o.removeChild(n[t]),o.appendChild(n[t]))})),e&&this.animateAll()},save:function(){var t=this.options.store;t&&t.set&&t.set(this)},closest:function(t,e){return T(t,e||this.options.draggable,this.el,!1)},option:function(t,e){var n=this.options;if(void 0===e)return n[t];var o=J.modifyOption(this,t,e);n[t]=void 0!==o?o:e,"group"===t&&Xt(n)},destroy:function(){K("destroy",this);var t=this.el;t[V]=null,D(t,"mousedown",this._onTapStart),D(t,"touchstart",this._onTapStart),D(t,"pointerdown",this._onTapStart),this.nativeDraggable&&(D(t,"dragover",this),D(t,"dragenter",this)),Array.prototype.forEach.call(t.querySelectorAll("[draggable]"),(function(t){t.removeAttribute("draggable")})),this._onDrop(),this._disableDelayedDragEvents(),_t.splice(_t.indexOf(this.el),1),this.el=t=null},_hideClone:function(){if(!lt){if(K("hideClone",this),Ht.eventCanceled)return;I(at,"display","none"),this.options.removeCloneOnHide&&at.parentNode&&at.parentNode.removeChild(at),lt=!0}},_showClone:function(t){if("clone"===t.lastPutMode){if(lt){if(K("showClone",this),Ht.eventCanceled)return;tt.parentNode!=ot||this.options.group.revertClone?rt?ot.insertBefore(at,rt):ot.appendChild(at):ot.insertBefore(at,tt),this.options.group.revertClone&&this.animate(tt,at),I(at,"display",""),lt=!1}}else this._hideClone()}},Ot&&S(document,"touchmove",(function(t){(Ht.active||Dt)&&t.cancelable&&t.preventDefault()})),Ht.utils={on:S,off:D,css:I,find:M,is:function(t,e){return!!T(t,e,t,!1)},extend:function(t,e){if(t&&e)for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t},throttle:H,closest:T,toggleClass:N,clone:Z,index:j,nextTick:qt,cancelNextTick:Jt,detectDirection:Yt,getChild:Y},Ht.get=function(t){return t[V]},Ht.mount=function(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];e[0].constructor===Array&&(e=e[0]),e.forEach((function(t){if(!t.prototype||!t.prototype.constructor)throw"Sortable: Mounted plugin must be a constructor function, not ".concat({}.toString.call(t));t.utils&&(Ht.utils=u(u({},Ht.utils),t.utils)),J.mount(t)}))},Ht.create=function(t,e){return new Ht(t,e)},Ht.version="1.15.0";var Qt,Kt,$t,te,ee,ne,oe=[],re=!1;function ie(){oe.forEach((function(t){clearInterval(t.pid)})),oe=[]}function ae(){clearInterval(ne)}var le=H((function(t,e,n,o){if(e.scroll){var r,i=(t.touches?t.touches[0]:t).clientX,a=(t.touches?t.touches[0]:t).clientY,l=e.scrollSensitivity,s=e.scrollSpeed,c=P(),d=!1;Kt!==n&&(Kt=n,ie(),Qt=e.scroll,r=e.scrollFn,!0===Qt&&(Qt=U(n,!0)));var u=0,h=Qt;do{var p=h,f=L(p),m=f.top,g=f.bottom,v=f.left,A=f.right,b=f.width,E=f.height,y=void 0,w=void 0,C=p.scrollWidth,S=p.scrollHeight,D=I(p),x=p.scrollLeft,_=p.scrollTop;p===c?(y=b<C&&("auto"===D.overflowX||"scroll"===D.overflowX||"visible"===D.overflowX),w=E<S&&("auto"===D.overflowY||"scroll"===D.overflowY||"visible"===D.overflowY)):(y=b<C&&("auto"===D.overflowX||"scroll"===D.overflowX),w=E<S&&("auto"===D.overflowY||"scroll"===D.overflowY));var T=y&&(Math.abs(A-i)<=l&&x+b<C)-(Math.abs(v-i)<=l&&!!x),B=w&&(Math.abs(g-a)<=l&&_+E<S)-(Math.abs(m-a)<=l&&!!_);if(!oe[u])for(var k=0;k<=u;k++)oe[k]||(oe[k]={});oe[u].vx==T&&oe[u].vy==B&&oe[u].el===p||(oe[u].el=p,oe[u].vx=T,oe[u].vy=B,clearInterval(oe[u].pid),0==T&&0==B||(d=!0,oe[u].pid=setInterval(function(){o&&0===this.layer&&Ht.active._onTouchMove(ee);var e=oe[this.layer].vy?oe[this.layer].vy*s:0,n=oe[this.layer].vx?oe[this.layer].vx*s:0;"function"==typeof r&&"continue"!==r.call(Ht.dragged.parentNode[V],n,e,t,ee,oe[this.layer].el)||z(oe[this.layer].el,n,e)}.bind({layer:u}),24))),u++}while(e.bubbleScroll&&h!==c&&(h=U(h,!1)));re=d}}),30),se=function(t){var e=t.originalEvent,n=t.putSortable,o=t.dragEl,r=t.activeSortable,i=t.dispatchSortableEvent,a=t.hideGhostForTarget,l=t.unhideGhostForTarget;if(e){var s=n||r;a();var c=e.changedTouches&&e.changedTouches.length?e.changedTouches[0]:e,d=document.elementFromPoint(c.clientX,c.clientY);l(),s&&!s.el.contains(d)&&(i("spill"),this.onSpill({dragEl:o,putSortable:n}))}};function ce(){}function de(){}ce.prototype={startIndex:null,dragStart:function(t){var e=t.oldDraggableIndex;this.startIndex=e},onSpill:function(t){var e=t.dragEl,n=t.putSortable;this.sortable.captureAnimationState(),n&&n.captureAnimationState();var o=Y(this.sortable.el,this.startIndex,this.options);o?this.sortable.el.insertBefore(e,o):this.sortable.el.appendChild(e),this.sortable.animateAll(),n&&n.animateAll()},drop:se},f(ce,{pluginName:"revertOnSpill"}),de.prototype={onSpill:function(t){var e=t.dragEl,n=t.putSortable||this.sortable;n.captureAnimationState(),e.parentNode&&e.parentNode.removeChild(e),n.animateAll()},drop:se},f(de,{pluginName:"removeOnSpill"}),Ht.mount(new function(){function t(){for(var t in this.defaults={scroll:!0,forceAutoScrollFallback:!1,scrollSensitivity:30,scrollSpeed:10,bubbleScroll:!0},this)"_"===t.charAt(0)&&"function"==typeof this[t]&&(this[t]=this[t].bind(this))}return t.prototype={dragStarted:function(t){var e=t.originalEvent;this.sortable.nativeDraggable?S(document,"dragover",this._handleAutoScroll):this.options.supportPointer?S(document,"pointermove",this._handleFallbackAutoScroll):e.touches?S(document,"touchmove",this._handleFallbackAutoScroll):S(document,"mousemove",this._handleFallbackAutoScroll)},dragOverCompleted:function(t){var e=t.originalEvent;this.options.dragOverBubble||e.rootEl||this._handleAutoScroll(e)},drop:function(){this.sortable.nativeDraggable?D(document,"dragover",this._handleAutoScroll):(D(document,"pointermove",this._handleFallbackAutoScroll),D(document,"touchmove",this._handleFallbackAutoScroll),D(document,"mousemove",this._handleFallbackAutoScroll)),ae(),ie(),clearTimeout(B),B=void 0},nulling:function(){ee=Kt=Qt=re=ne=$t=te=null,oe.length=0},_handleFallbackAutoScroll:function(t){this._handleAutoScroll(t,!0)},_handleAutoScroll:function(t,e){var n=this,o=(t.touches?t.touches[0]:t).clientX,r=(t.touches?t.touches[0]:t).clientY,i=document.elementFromPoint(o,r);if(ee=t,e||this.options.forceAutoScrollFallback||A||v||E){le(t,this.options,i,e);var a=U(i,!0);!re||ne&&o===$t&&r===te||(ne&&ae(),ne=setInterval((function(){var i=U(document.elementFromPoint(o,r),!0);i!==a&&(a=i,ie()),le(t,n.options,i,e)}),10),$t=o,te=r)}else{if(!this.options.bubbleScroll||U(i,!0)===P())return void ie();le(t,this.options,U(i,!1),!1)}}},f(t,{pluginName:"scroll",initializeByDefault:!0})}),Ht.mount(de,ce);const ue=Ht;var he=n(379),pe=n.n(he),fe=n(795),me=n.n(fe),ge=n(569),ve=n.n(ge),Ae=n(565),be=n.n(Ae),Ee=n(216),ye=n.n(Ee),we=n(589),Ce=n.n(we),Se=n(426),De={};De.styleTagTransform=Ce(),De.setAttributes=be(),De.insert=ve().bind(null,"head"),De.domAPI=me(),De.insertStyleElement=ye(),pe()(Se.Z,De),Se.Z&&Se.Z.locals&&Se.Z.locals;const xe=new class{constructor(){this.items=[],JSON.parse(localStorage.getItem("ToDoList"))&&JSON.parse(localStorage.getItem("ToDoList")).forEach((t=>{this.items.push({...t})}))}add(t){this.items.push(t),this.store()}edit(t,e){const n=this.items.findIndex((e=>e.id===t.id));this.items[n]=e,this.store()}clear(){this.items=this.items.filter((t=>!t.isDone)),this.store()}reset(t){this.items=[],t.forEach((t=>{this.add(new c(t.task,!0))})),this.store()}remove(t){this.items=this.items.filter((e=>e.id!==t.id)),this.store()}order(t,e){let n=this.items[t];this.items[t]=this.items[e],this.items[e]=n,this.store()}store(){localStorage.setItem("ToDoList",JSON.stringify(this.items))}},_e="list-group-item d-flex align-items-center border-bottom",Te="list-group-item d-flex align-items-center border-bottom",Be=[{task:" a basic todo list app"},{task:"made with ❤️ by Amanuel"},{task:"——— enjoy 🔥 ———"}],ke=()=>{JSON.parse(localStorage.getItem("ToDoList"))||Be.forEach((t=>{xe.add(new c(t.task,!0))}));const t=document.getElementById("dashboard");let e,n;t.innerHTML="",xe.items.sort(((t,e)=>t.index-e.index)).forEach((e=>{const n=document.createElement("li");n.className=e.isDone?_e:Te;const o={...e},r=document.createElement("input");r.type="checkbox",r.name="name",r.className="form-check-input",r.style.marginRight="12px",r.checked=e.isDone,r.addEventListener("change",(t=>{n.className=e.isDone?Te:_e,t.target.nextElementSibling.className=e.isDone?"":"cancel",e.isDone=!e.isDone,xe.edit(o,e)})),n.addEventListener("click",(()=>{n.classList.add("custom-bg"),s.style="display:none",a.style="display: block"}));const i=document.createElement("span");i.setAttribute("contenteditable","true"),i.appendChild(document.createTextNode(e.task)),i.addEventListener("focus",(()=>{n.classList.add("custom-bg")})),i.addEventListener("keypress",(t=>{"Enter"===t.key&&(n.classList.remove("custom-bg"),i.setAttribute("contenteditable","false"),i.setAttribute("contenteditable","true"),e.task=i.innerText,xe.edit(o,e))})),document.addEventListener("click",(t=>{const e=t.target;e!==i&&e!==n&&(n.classList.remove("custom-bg"),s.style="display:block",a.style="display: none")}));const a=document.createElement("span");a.className="fa fa-trash-o close",a.addEventListener("click",(t=>{t.preventDefault(),xe.remove(e),ke()}));const l=document.createElement("span");l.className="ellipsis-container";const s=document.createElement("i");s.className="fas fa-ellipsis-v",s.addEventListener("click",(t=>{t.preventDefault()})),l.appendChild(s),n.append(r,i,a,l),t.appendChild(n)})),document.getElementById("task").addEventListener("keypress",(t=>{if("Enter"===t.key){const e=document.getElementById("task").value;t.preventDefault(),e.length>0&&(xe.add(new c(e,!1,0)),document.getElementById("task").value="",ke())}})),document.getElementById("complete").addEventListener("click",(t=>{t.preventDefault(),xe.clear(),ke()})),document.getElementById("refresh").addEventListener("click",(function(){let t=this;this.classList.add("reset"),xe.reset(Be),setTimeout((function(){t.classList.remove("reset")}),1e3),ke()})),new ue(dashboard,{handle:".ellipsis-container",animation:150,onStart:function(t){const n=t.item,o=Array.from(dashboard.children);e=o.indexOf(n)},onEnd:function(t){const o=t.item,r=Array.from(dashboard.children);n=r.indexOf(o),xe.order(e,n)}})};ke()}},t=>{t(t.s=625)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,